* Project Description + Kaggle Link 
The competition main page is [[https://www.kaggle.com/c/santander-customer-transaction-prediction/overview][Kaggle: Santander Customer Transaction Predictions]]

We are told:

"In this challenge, we invite Kagglers to help us identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted. The data provided for this competition has the same structure as the real data we have available to solve this problem."

We are provided with an anonymized dataset containing numeric feature variables, the binary target column, and a string ID_code column. The task is to predict the value of target column in the test set.

I liked this as a toy model competition because the task and data are relatively simple, but the description of the data is quite lacking, so I have to think.
* Preprocessing
** Import data and modules, split into train/test/validation  
Import the data. At this stage, we don't even import the unlabelled test data used for the competition, because we need labels to evaluate our model. So instead we'll split our training data as train/validation/test.

#+BEGIN_SRC python :session :results silent 
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
# for correlations heatmap in data exploration
import seaborn as sns

# import tensorflow as tf
# from tensorflow import keras
#+END_SRC


#+BEGIN_SRC python :session :results output 
raw_dataframe = pd.read_csv('train.csv')

# The ID_code column contains no information, so we remove it
raw_dataframe.pop('ID_code')

# Shuffle and split the data into train/validation/test dataframes (we could also consider using something like sklearn StratifiedKFold as we discover that we have class imbalance)
train_dataframe, test_dataframe = train_test_split(raw_dataframe, test_size=0.2)
train_dataframe, validation_dataframe = train_test_split(train_dataframe, test_size=0.2)

# Form np arrays of labels and features.
train_labels = np.array(train_dataframe.pop('target'))
validation_labels = np.array(validation_dataframe.pop('target'))
test_labels = np.array(test_dataframe.pop('target'))

train_features = np.array(train_dataframe)
validation_features = np.array(validation_dataframe)
test_features = np.array(test_dataframe)

#+END_SRC

#+RESULTS:

** Explore the data 
*** Look at the data and summary statistics 

#+BEGIN_SRC python :session
# Make a copy of our dataframe in case we want to make modifications
exploratory_dataframe = raw_dataframe.copy()

# Print the first 10 rows of our dataframe
exploratory_dataframe.head(10)
#+END_SRC

#+RESULTS:
#+begin_example
   target    var_0   var_1    var_2   var_3    var_4    var_5   var_6    var_7  ...  var_191  var_192  var_193  var_194  var_195  var_196  var_197  var_198  var_199
0       0   8.9255 -6.7863  11.9081  5.0930  11.4607  -9.2834  5.1187  18.6266  ...   3.9642   3.1364   1.6910  18.5227  -2.3978   7.8784   8.5635  12.7803  -1.0914
1       0  11.5006 -4.1473  13.8588  5.3890  12.3622   7.0433  5.6208  16.5338  ...   7.7214   2.5837  10.9516  15.4305   2.0339   8.1267   8.7889  18.3560   1.9518
2       0   8.6093 -2.7457  12.0805  7.8928  10.5825  -9.0837  6.9427  14.6155  ...   9.7905   1.6704   1.6858  21.6042   3.1417  -6.5213   8.2675  14.7222   0.3965
3       0  11.0604 -2.1518   8.9522  7.1957  12.5846  -1.8361  5.8428  14.9250  ...   4.7433   0.7178   1.4214  23.0347  -1.2706  -2.9275  10.2922  17.9697  -8.9996
4       0   9.8369 -1.4834  12.8746  6.6375  12.2772   2.4486  5.9405  19.2514  ...   9.5214  -0.1508   9.1942  13.2876  -1.5121   3.9267   9.5031  17.9974  -8.8104
5       0  11.4763 -2.3182  12.6080  8.6264  10.9621   3.5609  4.5322  15.2255  ...   6.6025   5.2912   0.4403  14.9452   1.0314  -3.6241   9.7670  12.5809  -4.7602
6       0  11.8091 -0.0832   9.3494  4.2916  11.1355  -8.0198  6.1961  12.0771  ...   6.4521   3.5325   0.1777  18.3314   0.5845   9.1104   9.1143  10.8869  -3.2097
7       0  13.5580 -7.9881  13.8776  7.5985   8.6543   0.8310  5.6890  22.3262  ...   6.5491   3.9906   5.8061  23.1407  -0.3776   4.2178   9.4237   8.6624   3.4806
8       0  16.1071  2.4426  13.9307  5.6327   8.8014   6.1630  4.4514  10.1854  ...  14.7510   1.6395   1.4181  14.8370  -1.9940  -1.0733   8.1975  19.5114   4.8453
9       0  12.5088  1.9743   8.8960  5.4508  13.6043 -16.2859  6.0637  16.8410  ...   6.3160   1.0371   3.6885  14.8344   0.4467  14.1287   7.9133  16.2375  14.2514

[10 rows x 201 columns]
#+end_example
 
And some statistics about the data

#+BEGIN_SRC python :session
exploratory_dataframe.describe()
#+END_SRC

#+RESULTS:
#+begin_example
              target          var_0          var_1          var_2          var_3  ...        var_195        var_196        var_197        var_198        var_199
count  200000.000000  200000.000000  200000.000000  200000.000000  200000.000000  ...  200000.000000  200000.000000  200000.000000  200000.000000  200000.000000
mean        0.100490      10.679914      -1.627622      10.715192       6.796529  ...      -0.142088       2.303335       8.908158      15.870720      -3.326537
std         0.300653       3.040051       4.050044       2.640894       2.043319  ...       1.429372       5.454369       0.921625       3.010945      10.438015
min         0.000000       0.408400     -15.043400       2.117100      -0.040200  ...      -5.261000     -14.209600       5.960600       6.299300     -38.852800
25%         0.000000       8.453850      -4.740025       8.722475       5.254075  ...      -1.170700      -1.946925       8.252800      13.829700     -11.208475
50%         0.000000      10.524750      -1.608050      10.580000       6.825000  ...      -0.172700       2.408900       8.888200      15.934050      -2.819550
75%         0.000000      12.758200       1.358625      12.516700       8.324100  ...       0.829600       6.556725       9.593300      18.064725       4.836800
max         1.000000      20.315000      10.376800      19.353000      13.188300  ...       4.272900      18.321500      12.000400      26.079100      28.500700

[8 rows x 201 columns]
#+end_example

Missing values check:

#+BEGIN_SRC python :session :results value 
# counts the number of entries in each column and checks if this number is equal across all columns
exploratory_dataframe.count().nunique()
#+END_SRC

#+RESULTS:
: 1

Every feature has has a datapoint for all 200,000 rows. Let's check for repeated entries:

#+BEGIN_SRC python :session :results value 
# count how many unique entries each row has
unique_row_values = exploratory_dataframe.nunique(axis='columns')

# output the number of unique entries
unique_row_values.unique()
#+END_SRC

#+RESULTS:
| 201 | 200 | 199 | 198 |

These are unusual numbers. Maybe the targets are interfering or maybe a value is repeated here or there by coincidence. Let's check:

#+BEGIN_SRC python :session :results silent 
# rows that have entries that are repeated in the row (ie. < 201 unique values)
rows_with_duplicates = exploratory_dataframe[unique_row_values != 201]

# note which entries are duplicated within a row 
duplicate_entries_boolean = rows_with_duplicates.apply(lambda x: x.duplicated(keep=False), axis = 1)
#+END_SRC

#+RESULTS:
#+begin_example
target    var_0   var_1    var_2  ...  var_196  var_197  var_198  var_199
14           0  13.8080  5.0514  17.2611  ...  -3.5323   9.3439  24.4479  -5.1110
22           0  10.2031  0.1925  14.0238  ...  -7.5486   9.5064   8.7281 -25.6523
26           0  15.6567 -4.4950  10.4867  ...   3.4319   7.8821  19.3055  -7.5090
68           0   8.5576  1.4385  10.6548  ...   1.0236   8.1925  18.2969 -16.2097
85           0   5.5511 -6.0495   6.8957  ...  13.8302   9.7335  11.1988  -0.7338
...      ...     ...      ...  ...      ...      ...      ...      ...
199877       1  12.3381 -3.0178  10.9429  ...   6.8868   9.2086  16.3833   9.6348
199888       0  12.6929 -4.9290  10.7029  ...  14.1003  10.6589  19.0044  11.3123
199908       0  12.4229  1.8738  10.5611  ...   0.0101   9.2432  19.8261  -3.6446
199910       0  10.7423  0.2901   9.0327  ...   3.8474   7.9792  20.8257  -0.6774
199935       0  15.6192 -2.2020  11.0134  ...   1.1220  10.1649  17.7713  -9.2515

[12975 rows x 201 columns]
        target  var_0  var_1  var_2  ...  var_196  var_197  var_198  var_199
14       False  False  False  False  ...    False    False    False    False
22       False  False  False  False  ...    False    False    False    False
26       False  False  False  False  ...    False    False    False    False
68       False  False  False  False  ...    False    False    False    False
85       False  False  False  False  ...    False    False    False    False
...    ...    ...    ...  ...      ...      ...      ...      ...
199877   False  False  False  False  ...    False    False    False    False
199888   False  False  False  False  ...    False    False    False    False
199908   False  False  False  False  ...    False    False    False    False
199910   False  False  False  False  ...    False    False    False    False
199935   False  False  False   True  ...    False    False    False    False

[12975 rows x 201 columns]
#+end_example

Let's look at repeated values across columns and their corresponding features:

#+BEGIN_SRC python :session :results output  
# there are thousands of rows with dulicates, so let's only output the first 10
for row in rows_with_duplicates.index[0:10]:
    
    # For each row, find which entries are repeated entries (duplicate_entries_boolean == True) and then output these values with their corresponding columns headings 
    print(rows_with_duplicates.loc[row,
                                    duplicate_entries_boolean.loc[row] == True])
#+END_SRC

#+RESULTS:
#+begin_example
var_109    16.4421
var_153    16.4421
Name: 14, dtype: float64
var_31     13.8222
var_104    13.8222
Name: 22, dtype: float64
var_12    13.972
var_81    13.972
Name: 26, dtype: float64
var_33    18.6714
var_92    18.6714
Name: 68, dtype: float64
var_23    3.1413
var_64    3.1413
Name: 85, dtype: float64
var_63    -3.6868
var_180   -3.6868
Name: 113, dtype: float64
var_98     2.5277
var_124    2.5277
Name: 114, dtype: float64
var_63     3.2496
var_105    3.2496
Name: 141, dtype: float64
var_46     9.3496
var_139    9.3496
Name: 193, dtype: float64
var_1    -1.1508
var_65   -1.1508
Name: 196, dtype: float64
#+end_example

Let's check for repeated values in each feature (within each dataframe column).  

#+BEGIN_SRC python :session :results values 
# find the n features with largest correlation with the target
indices = exploratory_dataframe.corr()[['target']].nlargest(10,'target').index

# check how many unique entries appear for these n features
exploratory_dataframe[indices].nunique()
#+END_SRC

#+RESULTS:
#+begin_example
target          2
var_6       38599
var_110    106121
var_53      33460
var_26     127089
var_22      90660
var_99      69300
var_190    114959
var_2       86555
var_133     19236
dtype: int64
#+end_example

Let's check for columns that have the most repeated features

#+BEGIN_SRC python :session :results values
# print column that has the most repeated values
print(exploratory_dataframe['var_68'])

# print n features with the most repeated values
exploratory_dataframe.nunique().nsmallest(20)
#+END_SRC

#+RESULTS:
#+begin_example
target         2
var_68       451
var_91      7962
var_108     8525
var_103     9376
var_12      9561
var_148    10608
var_161    11071
var_71     13527
var_25     14853
var_43     15188
var_125    16059
var_166    17902
var_169    18242
var_133    19236
var_15     19810
var_131    21464
var_23     24913
var_34     25164
var_93     26708
dtype: int64
#+end_example




We can note some things so far (~10% of binary targets are 1, rest 0, so we have an imbalanced classification problem, we can note approximate upper and lower bounds on the data, rough idea of the width of the distributions, all numeric data so no need to process categorical variables). 

*** Which naive features correlate with the target and with each other?

#+BEGIN_SRC python :session :results output 
# pick out some features to draw correlations, and prepend 'target'
num_random_features = 10 
some_features = [f'var_{i}' for i in range (num_random_features)]
some_features.insert(0,'target')

# correlations
feature_correlations = exploratory_dataframe[some_features].corr()


# calculate correlations of all features with the target, find n largest entries
print(exploratory_dataframe.corr()[['target']].nlargest(20,'target'))
#+END_SRC

#+RESULTS:
#+begin_example
target
target   1.000000
var_6    0.066731
var_110  0.064275
var_53   0.063399
var_26   0.062422
var_22   0.060558
var_99   0.058367
var_190  0.055973
var_2    0.055870
var_133  0.054548
var_0    0.052390
var_1    0.050343
var_179  0.050002
var_40   0.049530
var_184  0.048315
var_78   0.048245
var_170  0.047973
var_191  0.047114
var_94   0.046296
var_67   0.044673
#+end_example

#+BEGIN_SRC python :session :results file

# draw correlation heatmap
plt.figure(figsize=(10,10))
sns.heatmap(feature_correlations, annot=True)
plt.savefig('feature_correlations.png')
plt.close()
'feature_correlations.png'
#+END_SRC

#+RESULTS:
[[file:raw_correlations.png]]

We don't notice any strong linear correlations, so we probably need to do some feature engineering and/or use nonlinear models.

*** Plot some dataframe rows

Let's plot all of the features for a given target on the same set of axes (perhaps this represents a sequence of transactions in time or something like that).

#+BEGIN_SRC python :session :results file 
j=15
plt.plot(train_features[j])
print([i for i,x in enumerate(train_labels[:100]) if x==1]) 
plt.savefig('sample_row_plot.png')
plt.close()
'sample_row_plot.png'
#+END_SRC

#+RESULTS:
[[file:sample_features_plot.png]]

Let's plot a column of interest that has a lot of repeated values

#+BEGIN_SRC python :session :results file 
# print(np.array(kexploratory_dataframe['var_68'])
exploratory_dataframe.plot(y='var_68', style='o', markersize=1) 
plt.savefig('sample_feature_plot.png')
plt.close()
'sample_feature_plot.png'
#+END_SRC

#+RESULTS:
[[file:sample_feature_plot.png]]

*** Plot some histograms 

Plot a histogram of a column:

#+BEGIN_SRC python :session :results file
exploratory_dataframe['var_68'].hist()
plt.savefig('feature_68_hist.png')
plt.close()
'feature_68_hist.png'
#+END_SRC

#+RESULTS:
[[file:feature_68_hist.png]]
 
Let's look at what all rows with target value 1 look like

#+BEGIN_SRC python :session
exploratory_dataframe.loc[exploratory_dataframe['target']==1]
#+END_SRC

#+RESULTS:
#+begin_example
             ID_code  target    var_0   var_1    var_2   var_3    var_4    var_5   var_6    var_7   var_8   var_9  ...  var_188  var_189  var_190  var_191  var_192  var_193  var_194  var_195  var_196  var_197  var_198  var_199
13          train_13       1  16.3699  1.5934  16.7395  7.3330  12.1450   5.9004  4.8222  20.9729  1.1064  8.6978  ...  11.9586  -0.5899   7.4002   7.4031   4.3989   4.0978  17.3638  -1.3022   9.6846   9.0419  15.6064 -10.8529
29          train_29       1   5.3301 -2.6064  13.1913  3.1193   6.6483  -6.5659  5.9064  15.2341  1.2915  9.1168  ...  18.6375   0.1734   5.9215   7.9676   2.3405   1.1482  23.2168  -2.0105   3.7600   9.4513  17.4105 -14.6897
63          train_63       1   7.7072  0.0183   9.9974  8.3524   9.2886 -13.3627  6.0425  10.1108  1.3999  6.6710  ...  10.0679   1.9046   1.5832   5.0039   3.8814   7.4241  21.4844  -0.8297  -3.0468   7.5790  15.7685   5.4769
65          train_65       1  10.5358 -2.5439   8.7394  6.7548  14.4099  -3.8724  5.1584  15.8381  5.8204  9.0358  ...  10.2542   1.5517   4.6648   6.4227   3.4025  -4.0882  14.1174  -0.2472   5.3847   8.6949  15.1340   3.8449
71          train_71       1   6.7547  2.5973  14.2141  8.3514   7.4942  -1.3055  4.2336  15.0243 -1.8922  9.1282  ...  13.8773  -0.0899   1.4677   3.5935   2.0013   1.5777  18.2820  -4.3408   6.8869   9.3567  18.9013  13.3447
...              ...     ...      ...     ...      ...     ...      ...      ...     ...      ...     ...     ...  ...      ...      ...      ...      ...      ...      ...      ...      ...      ...      ...      ...      ...
199966  train_199966       1  13.5797  2.5526   6.0512  5.2730  12.2182  -3.4048  7.3623  17.8372 -3.5604  8.8837  ...  20.7649  -0.4363   3.9023   7.9986   0.5213   2.3442  14.5510  -1.1530   8.9883   8.3389   9.5440   4.2493
199976  train_199976       1   7.9663 -2.8485   9.0919  7.3298   9.6690 -16.7872  4.5094  12.4351 -0.0113  8.5394  ...  20.1372   0.3380  10.7930   4.3876   3.7257   7.7038  14.7384   0.1561   1.5794   8.4627  14.3604  -1.6688
199981  train_199981       1  12.8140  0.6386  14.1657  7.1044   8.9365  -0.3274  6.5949  14.6078 -1.0373  8.8974  ...   7.0611   1.5463   4.8208   4.9010   2.2513   0.7308  14.7155   1.1464   5.5158   8.6519  16.0341   7.3809
199986  train_199986       1  12.0298 -8.7800   7.7071  7.4015   9.2305 -16.2174  5.9064  17.9268  3.6489  7.3970  ...   9.3059  -1.0691  16.7461   3.1249  -0.3943   8.4059  14.3367   3.0991   4.3853   8.8019  15.0031  -0.3659
199990  train_199990       1  14.1475  1.8568  11.0066  3.6779  12.1944 -16.5936  5.3217  14.8508  3.3377  6.1650  ...  16.0983   0.8156  -6.4708   4.7287   1.9034   7.2324  20.6047   1.7170  -4.0032   9.1627  13.8077  -1.9646

[20098 rows x 202 columns]
#+end_example

Plot a histogram across features for a given row that has target value 1.

#+BEGIN_SRC python :session :results file 
exploratory_dataframe.iloc[13,2:].hist()

# We need to save the figure to display inline in org mode. We also should use plt.close() so that we can respawn new different images without issues.
plt.savefig('row_hist1.png')
plt.close()
'row_hist1.png'
#+END_SRC

#+RESULTS:
[[file:hist1.png]]

* DONE Basic Neural Net model 
CLOSED: [2020-01-29 Wed 20:01]
** No class weights 

Let's follow https://www.tensorflow.org/tutorials/structured_data/imbalanced_data to implement a basic Neural Net in Tensorflow. We'll use a single layer for benchmarking and optimize later. Most of the code is copy-pasted from the tutorial. 

Define the model and metrics

#+BEGIN_SRC python :session :results output
  METRICS = [
      keras.metrics.TruePositives(name='tp'),
      keras.metrics.FalsePositives(name='fp'),
      keras.metrics.TrueNegatives(name='tn'),
      keras.metrics.FalseNegatives(name='fn'),
      keras.metrics.BinaryAccuracy(name='accuracy'),
      keras.metrics.Precision(name='precision'),
      keras.metrics.Recall(name='recall'),
      keras.metrics.AUC(name='auc'),
  ]

  # Note the option to use bias initialization, see http://karpathy.github.io/2019/04/25/recipe/#2-set-up-the-end-to-end-trainingevaluation-skeleton--get-dumb-baselines
  # We modify the tutorial to allow for different numbers of hidden units
  def make_model(metrics = METRICS, output_bias=None, hidden_units = 16):
      if output_bias is not None:
          output_bias = tf.keras.initializers.Constant(output_bias)
      model = keras.Sequential([
          keras.layers.Dense(hidden_units, activation='relu',
                            input_shape=(train_features.shape[-1],)),
          keras.layers.Dropout(0.2),
          keras.layers.Dense(1, activation='sigmoid',
                            bias_initializer=output_bias)
        ])


      model.compile(
          optimizer=keras.optimizers.Adam(lr=1e-3),
          loss=keras.losses.BinaryCrossentropy(),
          metrics=metrics)
      return model
#+END_SRC

#+RESULTS:

Build the model

#+BEGIN_SRC python :session :results output
EPOCHS = 100
BATCH_SIZE = 2048

early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor='val_auc', 
    verbose=1,
    patience=10,
    mode='max',
    restore_best_weights=True)

model = make_model()
model.summary()

#+END_SRC


#+RESULTS:
#+begin_example
Model: "sequential_8"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_24 (Dense)             (None, 16)                3216      
_________________________________________________________________
dropout_16 (Dropout)         (None, 16)                0         
_________________________________________________________________
dense_25 (Dense)             (None, 1)                 17        
=================================================================
Total params: 3,233
Trainable params: 3,233
Non-trainable params: 0
_________________________________________________________________
#+end_example

Test run with a small amount of data

#+BEGIN_SRC python :session :results output
# Input numpy as a numpy array
model.predict(train_features[:10])
#+END_SRC

#+RESULTS:
#+begin_example
2020-01-26 21:39:16.948460: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10
array([[0.9997596 ],
       [0.5061394 ],
       [0.9303511 ],
       [0.7892672 ],
       [0.9999958 ],
       [0.9980216 ],
       [0.33681375],
       [0.35988793],
       [0.9976675 ],
       [0.9999008 ]], dtype=float32)
#+end_example

So far so good, let's follow the tutorial to set the initial bias as Log(pos/neg)

#+BEGIN_SRC python :session 
initial_bias = np.log(1/9)

model = make_model(output_bias = initial_bias)
model.predict(train_features[:10])

#+END_SRC

#+RESULTS:
|    0.94163775 |
|    0.92257184 |
|     0.8388229 |
|  0.0018517158 |
| 4.5338511e-05 |
|    0.27973586 |
|  0.0094071003 |
|   0.029227791 |
|    0.47860023 |
|  0.0087348791 |


Train the model

#+BEGIN_SRC python :session :results silent 
initial_bias = np.log(1/9)

model = make_model(hidden_units = 16, output_bias = initial_bias)

# Features and labels input as numpy arrays
baseline_history = model.fit(
    train_features,
    train_labels,
    batch_size=2048,
    epochs=500,
    # callbacks = [early_stopping],
    validation_data=(validation_features, validation_labels))
#+END_SRC

#+RESULTS:
: 2020-01-27 23:12:17.650343: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 204800000 exceeds 10% of system memory.
: 2020-01-27 23:12:17.912503: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 51200000 exceeds 10% of system memory.
: Train on 128000 samples, validate on 32000 samples
:   2048/128000 [..............................] - ETA: 7:54 - loss: 22.8784 - tp: 205.0000 - fp: 1806.0000 - tn: 30.0000 - fn: 7.0000 - accuracy: 0.1147 - precision: 0.1019 - recall: 0.9670 - auc: 0.4867  8192/128000 [>.............................] - ETA: 1:53 - loss: 16.3919 - tp: 788.0000 - fp: 6764.0000 - tn: 579.0000 - fn: 61.0000 - accuracy: 0.1669 - precision: 0.1043 - recall: 0.9282 - auc: 0.4966 22528/128000 [====>.........................] - ETA: 36s - loss: 7.9990 - tp: 1208.0000 - fp: 10592.0000 - tn: 9610.0000 - fn: 1118.0000 - accuracy: 0.4802 - precision: 0.1024 - recall: 0.5193 - auc: 0.4953 36864/128000 [=======>......................] - ETA: 19s - loss: 5.8956 - tp: 1216.0000 - fp: 10686.0000 - tn: 22399.0000 - fn: 2563.0000 - accuracy: 0.6406 - precision: 0.1022 - recall: 0.3218 - auc: 0.4991 51200/128000 [===========>..................] - ETA: 11s - loss: 5.0086 - tp: 1219.0000 - fp: 10718.0000 - tn: 35259.0000 - fn: 4004.0000 - accuracy: 0.7125 - precision: 0.1021 - recall: 0.2334 - auc: 0.5007 65536/128000 [==============>...............] - ETA: 7s - loss: 4.4345 - tp: 1229.0000 - fp: 10819.0000 - tn: 47999.0000 - fn: 5489.0000 - accuracy: 0.7512 - precision: 0.1020 - recall: 0.1829 - auc: 0.5004  79872/128000 [=================>............] - ETA: 4s - loss: 3.9526 - tp: 1285.0000 - fp: 11237.0000 - tn: 60502.0000 - fn: 6848.0000 - accuracy: 0.7736 - precision: 0.1026 - recall: 0.1580 - auc: 0.5015 94208/128000 [=====================>........] - ETA: 2s - loss: 3.5805 - tp: 1436.0000 - fp: 12531.0000 - tn: 72058.0000 - fn: 8183.0000 - accuracy: 0.7801 - precision: 0.1028 - recall: 0.1493 - auc: 0.5016108544/128000 [========================>.....] - ETA: 1s - loss: 3.2964 - tp: 1675.0000 - fp: 14593.0000 - tn: 82898.0000 - fn: 9378.0000 - accuracy: 0.7792 - precision: 0.1030 - recall: 0.1515 - auc: 0.5016122880/128000 [===========================>..] - ETA: 0s - loss: 3.0659 - tp: 1852.0000 - fp: 16176.0000 - tn: 94222.0000 - fn: 10630.0000 - accuracy: 0.7819 - precision: 0.1027 - recall: 0.1484 - auc: 0.5008128000/128000 [==============================] - 9s 70us/sample - loss: 2.9920 - tp: 1909.0000 - fp: 16609.0000 - tn: 98408.0000 - fn: 11074.0000 - accuracy: 0.7837 - precision: 0.1031 - recall: 0.1470 - auc: 0.5016 - val_loss: 0.9531 - val_tp: 65.0000 - val_fp: 342.0000 - val_tn: 28514.0000 - val_fn: 3079.0000 - val_accuracy: 0.8931 - val_precision: 0.1597 - val_recall: 0.0207 - val_auc: 0.5117
** With class weights

#+BEGIN_SRC python :session :results output
# total/negative examples, total/positive examples, factor of 1/2 according to https://www.tensorflow.org/tutorials/structured_data/imbalanced_data
weight_for_0 = (10.0/9.0)*1/2.0 
weight_for_1 = 10.0/2.0

class_weight = {0: weight_for_0, 1: weight_for_1}

print('Weight for class 0: {:.2f}'.format(weight_for_0))
print('Weight for class 1: {:.2f}'.format(weight_for_1))

#+END_SRC

#+RESULTS:
: Weight for class 0: 0.56
: Weight for class 1: 5.00

#+BEGIN_SRC python :session :results silent
initial_bias = np.log(1/9)

weighted_model = make_model(hidden_units = 16, output_bias = initial_bias)

# features and labels input as numpy arrays
weighted_history = weighted_model.fit(
    train_features,
    train_labels,
    batch_size=2048*4,
    epochs=500,
    # callbacks = [early_stopping],
    validation_data=(validation_features, validation_labels),
    # The class weights go here
    class_weight=class_weight) 
#+END_SRC

** Plot some metrics 

Define function to plot metrics

#+BEGIN_SRC python :session :results output 

import matplotlib as mpl
def plot_metrics(history):
    metrics =  ['loss', 'auc', 'precision', 'recall']
    mpl.rcParams['figure.figsize'] = (12, 10)
    colors = plt.rcParams['axes.prop_cycle'].by_key()['color']
    plt.figure(figsize=(6,4))
 
    for n, metric in enumerate(metrics):
        name = metric.replace("_"," ").capitalize()
        plt.subplot(2,2,n+1)
        plt.plot(history.epoch,  history.history[metric], color=colors[0], label='Train')
        plt.plot(history.epoch, history.history['val_'+metric], color=colors[0], linestyle="--", label='Val')
        plt.xlabel('Epoch')
        plt.ylabel(name)
        if metric == 'loss':
            plt.ylim([0, plt.ylim()[1]])
        elif metric == 'auc':
            plt.ylim([0.8,1])
        else:
            plt.ylim([0,1])
    
    plt.legend()
    plt.savefig('metrics.png')
    plt.close()
#+END_SRC

#+RESULTS:

Display metrics plot

#+BEGIN_SRC python :session :results file
plot_metrics(weighted_history)
'metrics.png':pr
#+END_SRC

#+RESULTS:
[[file:metrics.png]]

* DONE Basic Random Forest 
CLOSED: [2020-02-02 Sun 16:19]

Let's first run a basic Random Forest from sklearn. We'll use a blend of tutorials, with the FastAI lecture http://course18.fast.ai/lessonsml1/lesson2.html as backbone.

#+BEGIN_SRC python :session :results output
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
from sklearn.tree import export_graphviz
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results output 
# set up model parameters - for a start we can train a single small tree, with no probabilistic sample (no bootstrap), and tell it to use all of our cores.
rf = RandomForestClassifier(n_estimators=100, max_depth=15, max_features="sqrt", n_jobs=7)

# Train the model on training data
rf.fit(train_features, train_labels)

# makes predictions of probabilities on validation data 
predictions = rf.predict_proba(validation_features)

# calculate auc (note we only need second column of prediction probabilites - the probability of positive label)
auc = roc_auc_score(y_true=validation_labels, y_score=predictions[:,1])

# results:
# n_estimators=10, max_depth=10 , max_features="sqrt": 0.742, 20sec
# n_estimators=100, max_depth=10 , max_features="sqrt": 0.803, 40sec
# n_estimators=300, max_depth=10 , max_features="sqrt": 0.813, 2min 
# n_estimators=100, max_depth=15 , max_features="sqrt": 0.814, 1min 
# n_estimators=100, max_depth=25 , max_features="sqrt": 0.819, 2min 
# n_estimators=100, max_depth=15 , max_features="sqrt", class_weight={0:1,1:9}: 0.757, 2min 
# n_estimators=300, max_depth=15 , max_features="sqrt", class_weight={0:1,1:9}: 0.793, 3min 
# n_estimators=500, max_depth=25, max_features="sqrt", class_weight={0:1,1:9}, n_jobs=7: 0.822, 6min
# n_estimators=1000, max_depth=42, max_features="sqrt", class_weight={0:1,1:9}, n_jobs=7: 0.835, 15min
# n_estimators=2000, max_depth=42, max_features="sqrt", class_weight={0:1,1:9}, n_jobs=7: 0.837, 23min
# n_estimators=1000, max_depth=42, max_features=40, class_weight={0:1,1:9}, n_jobs=7: 0.809, 35min
# n_estimators=2000, max_depth=25, max_features=40, class_weight={0:1,1:9}, n_jobs=7: 0.815, 55min
print(auc)
#+END_SRC

#+RESULTS:
: 0.8147160562178322

Let's draw the simple tree

#+BEGIN_SRC python :# export_graphviz(rf.estimators_[0], out_file=dotfile)
session :results output
#+END_SRC


** What if we scale our data? 
#+BEGIN_SRC python :session :results output
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

# scale according to training data
train_features_scaled = scaler.fit_transform(train_features)

# apply the same transformation to validation data
val_features_scaled = scaler.transform(validation_features)

#+END_SRC

#+RESULTS:



# scaling

#+BEGIN_SRC python :session :results output
# set up model parameters
rf = RandomForestClassifier(n_estimators=100, max_depth=15, max_features="sqrt", class_weight={0:1,1:9}, n_jobs=-1)

# Train the model on training data
rf.fit(train_features_scaled, train_labels)

# makes predictions on validation and print auc 
predictions = rf.predict_proba(val_features_scaled)
auc = roc_auc_score(y_true=validation_labels, y_score=predictions[:,1])

# results: 

print(auc)
#+END_SRC

#+RESULTS:
: 0.7583061694212846


Could purposefully samply less of the negative examples.
 
* DONE GBT in tensorflow (abandoned)   
CLOSED: [2020-02-03 Mon 05:47]

Let's also benchmark with a basic GBT implementation. We follow the tensorflow tutorial at https://www.tensorflow.org/tutorials/estimator/boosted_trees.


#+BEGIN_SRC python :session :results output
# useful shorthand to reduce clutter
fc = tf.feature_column
# start by using all features
NUMERIC_COLUMNS = [f'var_{i}' for i in range(20)]

feature_columns = []

for feature_name in NUMERIC_COLUMNS:
    feature_columns.append(fc.numeric_column(feature_name, dtype=tf.float32))
    
#+END_SRC

#+RESULTS:

Input functions

#+BEGIN_SRC python :session :results output
def make_input_fn(feature_dataframe,
                  target_dataframe,
                  batch_size=1, n_epochs=None,
                  shuffle=True):

    """Args:
        feature_dataframe: pandas dataframe
        target_dataframe: pandas dataframe
        n_epochs: 'None' results in using as many epochs as needed
    """

    SHUFFLE_BUFFER_SIZE = 10000
    def input_fn():
        dataset = tf.data.Dataset.from_tensor_slices((dict(feature_dataframe), target_dataframe))
        dataset = dataset.batch(batch_size)
        dataset = dataset.repeat(n_epochs)
        if shuffle:
            dataset = dataset.shuffle(SHUFFLE_BUFFER_SIZE)
        return dataset
    return input_fn

#+END_SRC

#+RESULTS:

Initaliaze GBT Classifier, train, and make predictions on validation data:

#+BEGIN_SRC python :session :results output
def train_GBT_classifier(feature_columns,
                         train_dataframe,
                         train_labels_dataframe,
                         validation_dataframe,
                         validation_labels_dataframe,
                         n_trees=100,
                         max_depth=6,
                         batch_size=100,
                         n_batches_per_layer=1):
    """Args:
        feature_columns: pandas dataframe
        train_dataframe: pandas dataframe
        train_labels_dataframe: pandas dataframe
        validation_dataframe: pandas dataframe
        validation_labels_dataframe: pandas dataframe
    """

    # Initialize the classifier
    GBT_classifier = tf.estimator.BoostedTreesClassifier(feature_columns,
                                                         n_trees=n_trees,
                                                         max_depth=max_depth,
                                                         n_batches_per_layer=n_batches_per_layer)

    # Train and validation input functions
    train_input_fn = make_input_fn(train_dataframe, train_labels_dataframe, batch_size, n_epochs=10)
    # Vaidation input function uses default batch_size=1
    val_input_fn = make_input_fn(validation_dataframe, validation_labels_dataframe,
                                 shuffle=False, n_epochs=1)

    # Train
    GBT_classifier.train(train_input_fn, max_steps=100)

    # Evaluate and print results
    result = GBT_classifier.evaluate(val_input_fn)
    print(pd.Series(result))

    # return classifier so we can make other predictions if needed
    return GBT_classifier

GBT_classifier = train_GBT_classifier(feature_columns,
                                      train_dataframe,
                                      train_labels_dataframe,
                                      validation_dataframe,
                                      validation_labels_dataframe,
                                      n_trees=10,
                                      max_depth=6,
                                      batch_size=1)

#+END_SRC

#+RESULTS:
#+begin_example
INFO:tensorflow:Using default config.
WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpymp5cnym
INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpymp5cnym', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true
graph_options {
  rewrite_options {
    meta_optimizer_iterations: ONE
  }
}
, '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_service': None, '_cluster_spec': ClusterSpec({}), '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}
WARNING:tensorflow:From /home/jonathan/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow_core/python/ops/resource_variable_ops.py:1628: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.
Instructions for updating:
If using Keras pass *_constraint arguments to layers.
WARNING:tensorflow:From /home/jonathan/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow_core/python/training/training_util.py:235: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.
Instructions for updating:
Use Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.
2020-02-03 03:00:39.480198: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2020-02-03 03:00:39.669985: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:39.670331: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1555] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GT 755M computeCapability: 3.0
coreClock: 1.0195GHz coreCount: 2 deviceMemorySize: 1.96GiB deviceMemoryBandwidth: 80.47GiB/s
2020-02-03 03:00:39.670362: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.2
2020-02-03 03:00:40.284232: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10
2020-02-03 03:00:40.443930: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10
2020-02-03 03:00:40.746711: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10
2020-02-03 03:00:41.021440: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10
2020-02-03 03:00:41.057930: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10
2020-02-03 03:00:41.122727: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-02-03 03:00:41.123034: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:41.123835: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:41.124448: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1697] Adding visible gpu devices: 0
INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Create CheckpointSaverHook.
WARNING:tensorflow:Issue encountered when serializing resources.
Type is unsupported, or the types of the items don't match field type in CollectionDef. Note this is a warning and probably safe to ignore.
'_Resource' object has no attribute 'name'
INFO:tensorflow:Graph was finalized.
2020-02-03 03:00:43.808162: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2395110000 Hz
2020-02-03 03:00:43.808721: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x563bb9ecd630 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-02-03 03:00:43.808757: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-02-03 03:00:43.809025: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:43.809507: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1555] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GT 755M computeCapability: 3.0
coreClock: 1.0195GHz coreCount: 2 deviceMemorySize: 1.96GiB deviceMemoryBandwidth: 80.47GiB/s
2020-02-03 03:00:43.809563: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.2
2020-02-03 03:00:43.809597: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10
2020-02-03 03:00:43.809627: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10
2020-02-03 03:00:43.809654: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10
2020-02-03 03:00:43.809682: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10
2020-02-03 03:00:43.809710: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10
2020-02-03 03:00:43.809739: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-02-03 03:00:43.809825: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:43.810297: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:43.810697: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1697] Adding visible gpu devices: 0
2020-02-03 03:00:43.810750: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.2
2020-02-03 03:00:44.133690: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1096] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-02-03 03:00:44.133725: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102]      0 
2020-02-03 03:00:44.133732: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] 0:   N 
2020-02-03 03:00:44.133918: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:44.134301: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:44.134658: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:00:44.134990: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1241] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1691 MB memory) -> physical GPU (device: 0, name: GeForce GT 755M, pci bus id: 0000:01:00.0, compute capability: 3.0)
2020-02-03 03:00:44.136577: I tensorflow/compiler/xla/service/platform_util.cc:205] StreamExecutor cuda device (0) is of insufficient compute capability: 3.5 required, device is 3.0
2020-02-03 03:00:44.136652: I tensorflow/compiler/jit/xla_gpu_device.cc:136] Ignoring visible XLA_GPU_JIT device. Device number is 0, reason: Internal: no supported devices found for platform CUDA
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
WARNING:tensorflow:Issue encountered when serializing resources.
Type is unsupported, or the types of the items don't match field type in CollectionDef. Note this is a warning and probably safe to ignore.
'_Resource' object has no attribute 'name'
INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpymp5cnym/model.ckpt.
WARNING:tensorflow:Issue encountered when serializing resources.
Type is unsupported, or the types of the items don't match field type in CollectionDef. Note this is a warning and probably safe to ignore.
'_Resource' object has no attribute 'name'
INFO:tensorflow:loss = 0.6931472, step = 0
WARNING:tensorflow:It seems that global step (tf.train.get_global_step) has not been increased. Current value (could be stable): 0 vs previous value: 0. You could increase the global step by passing tf.train.get_global_step() to Optimizer.apply_gradients or Optimizer.minimize.
INFO:tensorflow:Saving checkpoints for 60 into /tmp/tmpymp5cnym/model.ckpt.
WARNING:tensorflow:Issue encountered when serializing resources.
Type is unsupported, or the types of the items don't match field type in CollectionDef. Note this is a warning and probably safe to ignore.
'_Resource' object has no attribute 'name'
INFO:tensorflow:Loss for final step: 0.08353096.
INFO:tensorflow:Calling model_fn.
WARNING:tensorflow:From /home/jonathan/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow_core/python/ops/metrics_impl.py:2029: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Deprecated in favor of operator or tf.math.divide.
WARNING:tensorflow:From /home/jonathan/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow_estimator/python/estimator/canned/head.py:617: auc (from tensorflow.python.ops.metrics_impl) is deprecated and will be removed in a future version.
Instructions for updating:
The value of AUC returned by this may race with the update so this is deprected. Please use tf.keras.metrics.AUC instead.
WARNING:tensorflow:Trapezoidal rule is known to produce incorrect PR-AUCs; please switch to "careful_interpolation" instead.
WARNING:tensorflow:Trapezoidal rule is known to produce incorrect PR-AUCs; please switch to "careful_interpolation" instead.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Starting evaluation at 2020-02-03T03:01:30Z
INFO:tensorflow:Graph was finalized.
2020-02-03 03:01:30.822953: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:01:30.844028: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1555] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: GeForce GT 755M computeCapability: 3.0
coreClock: 1.0195GHz coreCount: 2 deviceMemorySize: 1.96GiB deviceMemoryBandwidth: 80.47GiB/s
2020-02-03 03:01:30.857993: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.2
2020-02-03 03:01:30.884146: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10
2020-02-03 03:01:30.884308: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10
2020-02-03 03:01:30.884376: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10
2020-02-03 03:01:30.884433: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10
2020-02-03 03:01:30.884487: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10
2020-02-03 03:01:30.884567: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-02-03 03:01:30.884761: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:01:30.885395: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:01:30.885863: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1697] Adding visible gpu devices: 0
2020-02-03 03:01:30.885921: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1096] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-02-03 03:01:30.885946: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102]      0 
2020-02-03 03:01:30.902420: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] 0:   N 
2020-02-03 03:01:30.902808: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:01:30.903429: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2020-02-03 03:01:30.903929: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1241] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1691 MB memory) -> physical GPU (device: 0, name: GeForce GT 755M, pci bus id: 0000:01:00.0, compute capability: 3.0)
2020-02-03 03:01:30.910430: I tensorflow/compiler/xla/service/platform_util.cc:205] StreamExecutor cuda device (0) is of insufficient compute capability: 3.5 required, device is 3.0
2020-02-03 03:01:30.910581: I tensorflow/compiler/jit/xla_gpu_device.cc:136] Ignoring visible XLA_GPU_JIT device. Device number is 0, reason: Internal: no supported devices found for platform CUDA
INFO:tensorflow:Restoring parameters from /tmp/tmpymp5cnym/model.ckpt-60
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
INFO:tensorflow:Inference Time : 101.28555s
INFO:tensorflow:Finished evaluation at 2020-02-03-03:03:11
INFO:tensorflow:Saving dict for global step 60: accuracy = 0.90178126, accuracy_baseline = 0.90178126, auc = 0.5, auc_precision_recall = 0.5491094, average_loss = 0.32557878, global_step = 60, label/mean = 0.09821875, loss = 0.32557878, precision = 0.0, prediction/mean = 0.07250305, recall = 0.0
WARNING:tensorflow:Issue encountered when serializing resources.
Type is unsupported, or the types of the items don't match field type in CollectionDef. Note this is a warning and probably safe to ignore.
'_Resource' object has no attribute 'name'
INFO:tensorflow:Saving 'checkpoint_path' summary for global step 60: /tmp/tmpymp5cnym/model.ckpt-60
accuracy                 0.901781
accuracy_baseline        0.901781
auc                      0.500000
auc_precision_recall     0.549109
average_loss             0.325579
label/mean               0.098219
loss                     0.325579
precision                0.000000
prediction/mean          0.072503
recall                   0.000000
global_step             60.000000
dtype: float64
#+end_example

* DONE GBT in XGBoost (abandoned)
CLOSED: [2020-02-04 Tue 00:34]

Load our numpy arrays into DMatrixes:

#+BEGIN_SRC python :session :results output
xgb_train = xgb.DMatrix(train_features, label=train_labels)
xgb_validation = xgb.DMatrix(validation_features, label=validation_labels)
#+END_SRC

#+RESULTS:

Set Booster parameters:

#+BEGIN_SRC python :session :results output
param = {'max_depth': 2, 'eta': 1, 'objective': 'binary:logistic'}
param['nthread'] = 2 
param['eval_metric'] = 'auc'

# Our gpu is Cuda compute 3.0, so we can only use the CPU with XGBoost
param['predictor'] = 'cpu_predictor'

evallist = [(xgb_validation, 'eval'), (xgb_train, 'train')]
#+END_SRC

#+RESULTS:

Check environment variables

#+BEGIN_SRC python :session :results output

#+END_SRC


Train the model

#+BEGIN_SRC python :session :results output
num_round = 1
xgb_model = xgb.train(param, xgb_train, num_round, evallist)
#+END_SRC

* DONE GBT in LightGBM
CLOSED: [2020-02-04 Tue 18:16]

From LightGBM documentation: best to use for larger datasets to avoid overfitting (> 10,000 rows).

#+BEGIN_SRC python :session :results output
import lightgbm as lgb

# create dataset for lightgbm
lgb_train = lgb.Dataset(train_features, train_labels)
lgb_eval = lgb.Dataset(validation_features,
                       validation_labels,
                       reference=lgb_train)
#+END_SRC

#+RESULTS:

Build the model

#+BEGIN_SRC python :session :results output
params = {
    # default num_trees=100
    'num_trees': 1000,
    'objective': 'binary',
    'metric': 'auc',
    'learning_rate': 0.05,
    # Percentage of features to be used for each tree
    'feature_fraction': 1.0,
    # Percentage of data to be sampled for each tree
    'bagging_fraction': 0.8,
    # Perform bagging at every k-th tree (bagging_freq must be non-zero for bagging_fraction to be used)
    'bagging_freq': 5,
    # Documentation recommends using number of available cores, not number of available threads
    'num_threads': 7
}

print('Starting training...')

# train
gbm = lgb.train(params,
                lgb_train,
                valid_sets=lgb_eval,
                early_stopping_rounds=100)

print('Done Training.')
#+END_SRC

#+RESULTS:
#+begin_example
Starting training...
[LightGBM] [Warning] Starting from the 2.1.2 version, default value for the "boost_from_average" parameter in "binary" objective is true.
This may cause significantly different results comparing to the previous versions of LightGBM.
Try to set boost_from_average=false, if your old models produce bad results
[LightGBM] [Info] Number of positive: 12794, number of negative: 115206
[LightGBM] [Info] Total Bins 51000
[LightGBM] [Info] Number of data: 128000, number of used features: 200
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.099953 -> initscore=-2.197746
[LightGBM] [Info] Start training from score -2.197746
[1]	valid_0's auc: 0.661083
Training until validation scores don't improve for 100 rounds
[2]	valid_0's auc: 0.691879
[3]	valid_0's auc: 0.707244
[4]	valid_0's auc: 0.720795
[5]	valid_0's auc: 0.729838
[6]	valid_0's auc: 0.739292
[7]	valid_0's auc: 0.749324
[8]	valid_0's auc: 0.755149
[9]	valid_0's auc: 0.760964
[10]	valid_0's auc: 0.766117
[11]	valid_0's auc: 0.770555
[12]	valid_0's auc: 0.773792
[13]	valid_0's auc: 0.777026
[14]	valid_0's auc: 0.780276
[15]	valid_0's auc: 0.783147
[16]	valid_0's auc: 0.786443
[17]	valid_0's auc: 0.789546
[18]	valid_0's auc: 0.790874
[19]	valid_0's auc: 0.792706
[20]	valid_0's auc: 0.793463
[21]	valid_0's auc: 0.795205
[22]	valid_0's auc: 0.797141
[23]	valid_0's auc: 0.799221
[24]	valid_0's auc: 0.800802
[25]	valid_0's auc: 0.802979
[26]	valid_0's auc: 0.804168
[27]	valid_0's auc: 0.804549
[28]	valid_0's auc: 0.805273
[29]	valid_0's auc: 0.806124
[30]	valid_0's auc: 0.807128
[31]	valid_0's auc: 0.809319
[32]	valid_0's auc: 0.810269
[33]	valid_0's auc: 0.812024
[34]	valid_0's auc: 0.813068
[35]	valid_0's auc: 0.814215
[36]	valid_0's auc: 0.81558
[37]	valid_0's auc: 0.816381
[38]	valid_0's auc: 0.817267
[39]	valid_0's auc: 0.818257
[40]	valid_0's auc: 0.819627
[41]	valid_0's auc: 0.819894
[42]	valid_0's auc: 0.820737
[43]	valid_0's auc: 0.821583
[44]	valid_0's auc: 0.822142
[45]	valid_0's auc: 0.822652
[46]	valid_0's auc: 0.823296
[47]	valid_0's auc: 0.824416
[48]	valid_0's auc: 0.825283
[49]	valid_0's auc: 0.825824
[50]	valid_0's auc: 0.826804
[51]	valid_0's auc: 0.827888
[52]	valid_0's auc: 0.828525
[53]	valid_0's auc: 0.829099
[54]	valid_0's auc: 0.829841
[55]	valid_0's auc: 0.830522
[56]	valid_0's auc: 0.83139
[57]	valid_0's auc: 0.831995
[58]	valid_0's auc: 0.832594
[59]	valid_0's auc: 0.833039
[60]	valid_0's auc: 0.833789
[61]	valid_0's auc: 0.834299
[62]	valid_0's auc: 0.834549
[63]	valid_0's auc: 0.83531
[64]	valid_0's auc: 0.836194
[65]	valid_0's auc: 0.836694
[66]	valid_0's auc: 0.837402
[67]	valid_0's auc: 0.837979
[68]	valid_0's auc: 0.83841
[69]	valid_0's auc: 0.838866
[70]	valid_0's auc: 0.839571
[71]	valid_0's auc: 0.840001
[72]	valid_0's auc: 0.840717
[73]	valid_0's auc: 0.84099
[74]	valid_0's auc: 0.841516
[75]	valid_0's auc: 0.8418
[76]	valid_0's auc: 0.842484
[77]	valid_0's auc: 0.842988
[78]	valid_0's auc: 0.843683
[79]	valid_0's auc: 0.844147
[80]	valid_0's auc: 0.844888
[81]	valid_0's auc: 0.845363
[82]	valid_0's auc: 0.845547
[83]	valid_0's auc: 0.845904
[84]	valid_0's auc: 0.846165
[85]	valid_0's auc: 0.846505
[86]	valid_0's auc: 0.846924
[87]	valid_0's auc: 0.847252
[88]	valid_0's auc: 0.847625
[89]	valid_0's auc: 0.848026
[90]	valid_0's auc: 0.848325
[91]	valid_0's auc: 0.848607
[92]	valid_0's auc: 0.848863
[93]	valid_0's auc: 0.849305
[94]	valid_0's auc: 0.849781
[95]	valid_0's auc: 0.850011
[96]	valid_0's auc: 0.85028
[97]	valid_0's auc: 0.850948
[98]	valid_0's auc: 0.851335
[99]	valid_0's auc: 0.851622
[100]	valid_0's auc: 0.851949
[101]	valid_0's auc: 0.852458
[102]	valid_0's auc: 0.852844
[103]	valid_0's auc: 0.852972
[104]	valid_0's auc: 0.853099
[105]	valid_0's auc: 0.853374
[106]	valid_0's auc: 0.85374
[107]	valid_0's auc: 0.853903
[108]	valid_0's auc: 0.85429
[109]	valid_0's auc: 0.854605
[110]	valid_0's auc: 0.854842
[111]	valid_0's auc: 0.855263
[112]	valid_0's auc: 0.855593
[113]	valid_0's auc: 0.8558
[114]	valid_0's auc: 0.856154
[115]	valid_0's auc: 0.856483
[116]	valid_0's auc: 0.856697
[117]	valid_0's auc: 0.85693
[118]	valid_0's auc: 0.857322
[119]	valid_0's auc: 0.857799
[120]	valid_0's auc: 0.858246
[121]	valid_0's auc: 0.8583
[122]	valid_0's auc: 0.858581
[123]	valid_0's auc: 0.85884
[124]	valid_0's auc: 0.85902
[125]	valid_0's auc: 0.859169
[126]	valid_0's auc: 0.859384
[127]	valid_0's auc: 0.859807
[128]	valid_0's auc: 0.860023
[129]	valid_0's auc: 0.860214
[130]	valid_0's auc: 0.860311
[131]	valid_0's auc: 0.860583
[132]	valid_0's auc: 0.860752
[133]	valid_0's auc: 0.860889
[134]	valid_0's auc: 0.861049
[135]	valid_0's auc: 0.861321
[136]	valid_0's auc: 0.861537
[137]	valid_0's auc: 0.861887
[138]	valid_0's auc: 0.861968
[139]	valid_0's auc: 0.862037
[140]	valid_0's auc: 0.86234
[141]	valid_0's auc: 0.862543
[142]	valid_0's auc: 0.86281
[143]	valid_0's auc: 0.86308
[144]	valid_0's auc: 0.863332
[145]	valid_0's auc: 0.86343
[146]	valid_0's auc: 0.86364
[147]	valid_0's auc: 0.86393
[148]	valid_0's auc: 0.86419
[149]	valid_0's auc: 0.864365
[150]	valid_0's auc: 0.864571
[151]	valid_0's auc: 0.86468
[152]	valid_0's auc: 0.864991
[153]	valid_0's auc: 0.865157
[154]	valid_0's auc: 0.865266
[155]	valid_0's auc: 0.865478
[156]	valid_0's auc: 0.865712
[157]	valid_0's auc: 0.865775
[158]	valid_0's auc: 0.865916
[159]	valid_0's auc: 0.866088
[160]	valid_0's auc: 0.866188
[161]	valid_0's auc: 0.866532
[162]	valid_0's auc: 0.866622
[163]	valid_0's auc: 0.866929
[164]	valid_0's auc: 0.867023
[165]	valid_0's auc: 0.86723
[166]	valid_0's auc: 0.867471
[167]	valid_0's auc: 0.867765
[168]	valid_0's auc: 0.86792
[169]	valid_0's auc: 0.868084
[170]	valid_0's auc: 0.868251
[171]	valid_0's auc: 0.868613
[172]	valid_0's auc: 0.868705
[173]	valid_0's auc: 0.868818
[174]	valid_0's auc: 0.868912
[175]	valid_0's auc: 0.869184
[176]	valid_0's auc: 0.869504
[177]	valid_0's auc: 0.869744
[178]	valid_0's auc: 0.869976
[179]	valid_0's auc: 0.870146
[180]	valid_0's auc: 0.870213
[181]	valid_0's auc: 0.870412
[182]	valid_0's auc: 0.870643
[183]	valid_0's auc: 0.870755
[184]	valid_0's auc: 0.870892
[185]	valid_0's auc: 0.871069
[186]	valid_0's auc: 0.871234
[187]	valid_0's auc: 0.871539
[188]	valid_0's auc: 0.871609
[189]	valid_0's auc: 0.871737
[190]	valid_0's auc: 0.87193
[191]	valid_0's auc: 0.87209
[192]	valid_0's auc: 0.872283
[193]	valid_0's auc: 0.872523
[194]	valid_0's auc: 0.872583
[195]	valid_0's auc: 0.872757
[196]	valid_0's auc: 0.87278
[197]	valid_0's auc: 0.87292
[198]	valid_0's auc: 0.872948
[199]	valid_0's auc: 0.873051
[200]	valid_0's auc: 0.87319
[201]	valid_0's auc: 0.873239
[202]	valid_0's auc: 0.873328
[203]	valid_0's auc: 0.873434
[204]	valid_0's auc: 0.873506
[205]	valid_0's auc: 0.873646
[206]	valid_0's auc: 0.873673
[207]	valid_0's auc: 0.873666
[208]	valid_0's auc: 0.873805
[209]	valid_0's auc: 0.873915
[210]	valid_0's auc: 0.874127
[211]	valid_0's auc: 0.87435
[212]	valid_0's auc: 0.874471
[213]	valid_0's auc: 0.874609
[214]	valid_0's auc: 0.874675
[215]	valid_0's auc: 0.874739
[216]	valid_0's auc: 0.874835
[217]	valid_0's auc: 0.874963
[218]	valid_0's auc: 0.875107
[219]	valid_0's auc: 0.875177
[220]	valid_0's auc: 0.87525
[221]	valid_0's auc: 0.875456
[222]	valid_0's auc: 0.875564
[223]	valid_0's auc: 0.875717
[224]	valid_0's auc: 0.875908
[225]	valid_0's auc: 0.875944
[226]	valid_0's auc: 0.876036
[227]	valid_0's auc: 0.876152
[228]	valid_0's auc: 0.876309
[229]	valid_0's auc: 0.876397
[230]	valid_0's auc: 0.876484
[231]	valid_0's auc: 0.876579
[232]	valid_0's auc: 0.87668
[233]	valid_0's auc: 0.876783
[234]	valid_0's auc: 0.87685
[235]	valid_0's auc: 0.876924
[236]	valid_0's auc: 0.877034
[237]	valid_0's auc: 0.87722
[238]	valid_0's auc: 0.87729
[239]	valid_0's auc: 0.877389
[240]	valid_0's auc: 0.877467
[241]	valid_0's auc: 0.877464
[242]	valid_0's auc: 0.877483
[243]	valid_0's auc: 0.877595
[244]	valid_0's auc: 0.877681
[245]	valid_0's auc: 0.877742
[246]	valid_0's auc: 0.877834
[247]	valid_0's auc: 0.877837
[248]	valid_0's auc: 0.877961
[249]	valid_0's auc: 0.878068
[250]	valid_0's auc: 0.878042
[251]	valid_0's auc: 0.878176
[252]	valid_0's auc: 0.878406
[253]	valid_0's auc: 0.878464
[254]	valid_0's auc: 0.878544
[255]	valid_0's auc: 0.878604
[256]	valid_0's auc: 0.878681
[257]	valid_0's auc: 0.878757
[258]	valid_0's auc: 0.878876
[259]	valid_0's auc: 0.878897
[260]	valid_0's auc: 0.878938
[261]	valid_0's auc: 0.87904
[262]	valid_0's auc: 0.879074
[263]	valid_0's auc: 0.879106
[264]	valid_0's auc: 0.879232
[265]	valid_0's auc: 0.879267
[266]	valid_0's auc: 0.879277
[267]	valid_0's auc: 0.879445
[268]	valid_0's auc: 0.879487
[269]	valid_0's auc: 0.879598
[270]	valid_0's auc: 0.879627
[271]	valid_0's auc: 0.879712
[272]	valid_0's auc: 0.879808
[273]	valid_0's auc: 0.879843
[274]	valid_0's auc: 0.879941
[275]	valid_0's auc: 0.879935
[276]	valid_0's auc: 0.879994
[277]	valid_0's auc: 0.880084
[278]	valid_0's auc: 0.880163
[279]	valid_0's auc: 0.880225
[280]	valid_0's auc: 0.880322
[281]	valid_0's auc: 0.880426
[282]	valid_0's auc: 0.880562
[283]	valid_0's auc: 0.880548
[284]	valid_0's auc: 0.88065
[285]	valid_0's auc: 0.880692
[286]	valid_0's auc: 0.880679
[287]	valid_0's auc: 0.880737
[288]	valid_0's auc: 0.880759
[289]	valid_0's auc: 0.880767
[290]	valid_0's auc: 0.88078
[291]	valid_0's auc: 0.880819
[292]	valid_0's auc: 0.880904
[293]	valid_0's auc: 0.880952
[294]	valid_0's auc: 0.881121
[295]	valid_0's auc: 0.881122
[296]	valid_0's auc: 0.881123
[297]	valid_0's auc: 0.881165
[298]	valid_0's auc: 0.881284
[299]	valid_0's auc: 0.881272
[300]	valid_0's auc: 0.881354
[301]	valid_0's auc: 0.881488
[302]	valid_0's auc: 0.881506
[303]	valid_0's auc: 0.881631
[304]	valid_0's auc: 0.881659
[305]	valid_0's auc: 0.881662
[306]	valid_0's auc: 0.881762
[307]	valid_0's auc: 0.881822
[308]	valid_0's auc: 0.881863
[309]	valid_0's auc: 0.881915
[310]	valid_0's auc: 0.88198
[311]	valid_0's auc: 0.882063
[312]	valid_0's auc: 0.88214
[313]	valid_0's auc: 0.882241
[314]	valid_0's auc: 0.882275
[315]	valid_0's auc: 0.882318
[316]	valid_0's auc: 0.882365
[317]	valid_0's auc: 0.882467
[318]	valid_0's auc: 0.882526
[319]	valid_0's auc: 0.882484
[320]	valid_0's auc: 0.882503
[321]	valid_0's auc: 0.882604
[322]	valid_0's auc: 0.882675
[323]	valid_0's auc: 0.882784
[324]	valid_0's auc: 0.882803
[325]	valid_0's auc: 0.882839
[326]	valid_0's auc: 0.882869
[327]	valid_0's auc: 0.88292
[328]	valid_0's auc: 0.882992
[329]	valid_0's auc: 0.883026
[330]	valid_0's auc: 0.883026
[331]	valid_0's auc: 0.883105
[332]	valid_0's auc: 0.883145
[333]	valid_0's auc: 0.883168
[334]	valid_0's auc: 0.883275
[335]	valid_0's auc: 0.883376
[336]	valid_0's auc: 0.883448
[337]	valid_0's auc: 0.883525
[338]	valid_0's auc: 0.883516
[339]	valid_0's auc: 0.883512
[340]	valid_0's auc: 0.883549
[341]	valid_0's auc: 0.883671
[342]	valid_0's auc: 0.883683
[343]	valid_0's auc: 0.883694
[344]	valid_0's auc: 0.883703
[345]	valid_0's auc: 0.883736
[346]	valid_0's auc: 0.883814
[347]	valid_0's auc: 0.883816
[348]	valid_0's auc: 0.883877
[349]	valid_0's auc: 0.883883
[350]	valid_0's auc: 0.883879
[351]	valid_0's auc: 0.883949
[352]	valid_0's auc: 0.883985
[353]	valid_0's auc: 0.884005
[354]	valid_0's auc: 0.884049
[355]	valid_0's auc: 0.884114
[356]	valid_0's auc: 0.884214
[357]	valid_0's auc: 0.884269
[358]	valid_0's auc: 0.884265
[359]	valid_0's auc: 0.884213
[360]	valid_0's auc: 0.884229
[361]	valid_0's auc: 0.884282
[362]	valid_0's auc: 0.884395
[363]	valid_0's auc: 0.884449
[364]	valid_0's auc: 0.88448
[365]	valid_0's auc: 0.884518
[366]	valid_0's auc: 0.884541
[367]	valid_0's auc: 0.884608
[368]	valid_0's auc: 0.884642
[369]	valid_0's auc: 0.884668
[370]	valid_0's auc: 0.884668
[371]	valid_0's auc: 0.884677
[372]	valid_0's auc: 0.884631
[373]	valid_0's auc: 0.884649
[374]	valid_0's auc: 0.884732
[375]	valid_0's auc: 0.884777
[376]	valid_0's auc: 0.884792
[377]	valid_0's auc: 0.884777
[378]	valid_0's auc: 0.884803
[379]	valid_0's auc: 0.884826
[380]	valid_0's auc: 0.884938
[381]	valid_0's auc: 0.884951
[382]	valid_0's auc: 0.885003
[383]	valid_0's auc: 0.88498
[384]	valid_0's auc: 0.885015
[385]	valid_0's auc: 0.885021
[386]	valid_0's auc: 0.885097
[387]	valid_0's auc: 0.885064
[388]	valid_0's auc: 0.885115
[389]	valid_0's auc: 0.88512
[390]	valid_0's auc: 0.885147
[391]	valid_0's auc: 0.885221
[392]	valid_0's auc: 0.885292
[393]	valid_0's auc: 0.885319
[394]	valid_0's auc: 0.885356
[395]	valid_0's auc: 0.885429
[396]	valid_0's auc: 0.885487
[397]	valid_0's auc: 0.885555
[398]	valid_0's auc: 0.885591
[399]	valid_0's auc: 0.885658
[400]	valid_0's auc: 0.885695
[401]	valid_0's auc: 0.885773
[402]	valid_0's auc: 0.885782
[403]	valid_0's auc: 0.885856
[404]	valid_0's auc: 0.885918
[405]	valid_0's auc: 0.885943
[406]	valid_0's auc: 0.88603
[407]	valid_0's auc: 0.886119
[408]	valid_0's auc: 0.886211
[409]	valid_0's auc: 0.886231
[410]	valid_0's auc: 0.886183
[411]	valid_0's auc: 0.886211
[412]	valid_0's auc: 0.886227
[413]	valid_0's auc: 0.886268
[414]	valid_0's auc: 0.886299
[415]	valid_0's auc: 0.886355
[416]	valid_0's auc: 0.886378
[417]	valid_0's auc: 0.886388
[418]	valid_0's auc: 0.88634
[419]	valid_0's auc: 0.886393
[420]	valid_0's auc: 0.886389
[421]	valid_0's auc: 0.886374
[422]	valid_0's auc: 0.886376
[423]	valid_0's auc: 0.886407
[424]	valid_0's auc: 0.886401
[425]	valid_0's auc: 0.8864
[426]	valid_0's auc: 0.886411
[427]	valid_0's auc: 0.886418
[428]	valid_0's auc: 0.88644
[429]	valid_0's auc: 0.886473
[430]	valid_0's auc: 0.886515
[431]	valid_0's auc: 0.886522
[432]	valid_0's auc: 0.886508
[433]	valid_0's auc: 0.886472
[434]	valid_0's auc: 0.886524
[435]	valid_0's auc: 0.886582
[436]	valid_0's auc: 0.886662
[437]	valid_0's auc: 0.886657
[438]	valid_0's auc: 0.886736
[439]	valid_0's auc: 0.886751
[440]	valid_0's auc: 0.886782
[441]	valid_0's auc: 0.886757
[442]	valid_0's auc: 0.886714
[443]	valid_0's auc: 0.886692
[444]	valid_0's auc: 0.886744
[445]	valid_0's auc: 0.886803
[446]	valid_0's auc: 0.886824
[447]	valid_0's auc: 0.886841
[448]	valid_0's auc: 0.886897
[449]	valid_0's auc: 0.886911
[450]	valid_0's auc: 0.886913
[451]	valid_0's auc: 0.886927
[452]	valid_0's auc: 0.886896
[453]	valid_0's auc: 0.886908
[454]	valid_0's auc: 0.886945
[455]	valid_0's auc: 0.886989
[456]	valid_0's auc: 0.887054
[457]	valid_0's auc: 0.887073
[458]	valid_0's auc: 0.887105
[459]	valid_0's auc: 0.887104
[460]	valid_0's auc: 0.887103
[461]	valid_0's auc: 0.887127
[462]	valid_0's auc: 0.887096
[463]	valid_0's auc: 0.887122
[464]	valid_0's auc: 0.887119
[465]	valid_0's auc: 0.887128
[466]	valid_0's auc: 0.887132
[467]	valid_0's auc: 0.887087
[468]	valid_0's auc: 0.887061
[469]	valid_0's auc: 0.887089
[470]	valid_0's auc: 0.887081
[471]	valid_0's auc: 0.887106
[472]	valid_0's auc: 0.887151
[473]	valid_0's auc: 0.887209
[474]	valid_0's auc: 0.887283
[475]	valid_0's auc: 0.887246
[476]	valid_0's auc: 0.887297
[477]	valid_0's auc: 0.887328
[478]	valid_0's auc: 0.887305
[479]	valid_0's auc: 0.887308
[480]	valid_0's auc: 0.887346
[481]	valid_0's auc: 0.887355
[482]	valid_0's auc: 0.887302
[483]	valid_0's auc: 0.887291
[484]	valid_0's auc: 0.887331
[485]	valid_0's auc: 0.887322
[486]	valid_0's auc: 0.887274
[487]	valid_0's auc: 0.887278
[488]	valid_0's auc: 0.887268
[489]	valid_0's auc: 0.887254
[490]	valid_0's auc: 0.887228
[491]	valid_0's auc: 0.887275
[492]	valid_0's auc: 0.887305
[493]	valid_0's auc: 0.887347
[494]	valid_0's auc: 0.887386
[495]	valid_0's auc: 0.887399
[496]	valid_0's auc: 0.88745
[497]	valid_0's auc: 0.887476
[498]	valid_0's auc: 0.887463
[499]	valid_0's auc: 0.887512
[500]	valid_0's auc: 0.887514
[501]	valid_0's auc: 0.88755
[502]	valid_0's auc: 0.887617
[503]	valid_0's auc: 0.887638
[504]	valid_0's auc: 0.887669
[505]	valid_0's auc: 0.887673
[506]	valid_0's auc: 0.887687
[507]	valid_0's auc: 0.887667
[508]	valid_0's auc: 0.887711
[509]	valid_0's auc: 0.887689
[510]	valid_0's auc: 0.887709
[511]	valid_0's auc: 0.887728
[512]	valid_0's auc: 0.887737
[513]	valid_0's auc: 0.887705
[514]	valid_0's auc: 0.887702
[515]	valid_0's auc: 0.887754
[516]	valid_0's auc: 0.887736
[517]	valid_0's auc: 0.887745
[518]	valid_0's auc: 0.887756
[519]	valid_0's auc: 0.887768
[520]	valid_0's auc: 0.887799
[521]	valid_0's auc: 0.887829
[522]	valid_0's auc: 0.887859
[523]	valid_0's auc: 0.88785
[524]	valid_0's auc: 0.887887
[525]	valid_0's auc: 0.887901
[526]	valid_0's auc: 0.88791
[527]	valid_0's auc: 0.887872
[528]	valid_0's auc: 0.887866
[529]	valid_0's auc: 0.887901
[530]	valid_0's auc: 0.887902
[531]	valid_0's auc: 0.887943
[532]	valid_0's auc: 0.88795
[533]	valid_0's auc: 0.887976
[534]	valid_0's auc: 0.888008
[535]	valid_0's auc: 0.888045
[536]	valid_0's auc: 0.888095
[537]	valid_0's auc: 0.888066
[538]	valid_0's auc: 0.888082
[539]	valid_0's auc: 0.888104
[540]	valid_0's auc: 0.888093
[541]	valid_0's auc: 0.888128
[542]	valid_0's auc: 0.88812
[543]	valid_0's auc: 0.888089
[544]	valid_0's auc: 0.88808
[545]	valid_0's auc: 0.888096
[546]	valid_0's auc: 0.888093
[547]	valid_0's auc: 0.888117
[548]	valid_0's auc: 0.888162
[549]	valid_0's auc: 0.88816
[550]	valid_0's auc: 0.888211
[551]	valid_0's auc: 0.888164
[552]	valid_0's auc: 0.888178
[553]	valid_0's auc: 0.888213
[554]	valid_0's auc: 0.888244
[555]	valid_0's auc: 0.888189
[556]	valid_0's auc: 0.888195
[557]	valid_0's auc: 0.888217
[558]	valid_0's auc: 0.888192
[559]	valid_0's auc: 0.888237
[560]	valid_0's auc: 0.888277
[561]	valid_0's auc: 0.888286
[562]	valid_0's auc: 0.888247
[563]	valid_0's auc: 0.888275
[564]	valid_0's auc: 0.888318
[565]	valid_0's auc: 0.888305
[566]	valid_0's auc: 0.888331
[567]	valid_0's auc: 0.888326
[568]	valid_0's auc: 0.888351
[569]	valid_0's auc: 0.888322
[570]	valid_0's auc: 0.888307
[571]	valid_0's auc: 0.888346
[572]	valid_0's auc: 0.888335
[573]	valid_0's auc: 0.888371
[574]	valid_0's auc: 0.888365
[575]	valid_0's auc: 0.88839
[576]	valid_0's auc: 0.888389
[577]	valid_0's auc: 0.888408
[578]	valid_0's auc: 0.888422
[579]	valid_0's auc: 0.888419
[580]	valid_0's auc: 0.888432
[581]	valid_0's auc: 0.888496
[582]	valid_0's auc: 0.888521
[583]	valid_0's auc: 0.888548
[584]	valid_0's auc: 0.888569
[585]	valid_0's auc: 0.88861
[586]	valid_0's auc: 0.888611
[587]	valid_0's auc: 0.888619
[588]	valid_0's auc: 0.888647
[589]	valid_0's auc: 0.888669
[590]	valid_0's auc: 0.888644
[591]	valid_0's auc: 0.888662
[592]	valid_0's auc: 0.888603
[593]	valid_0's auc: 0.888613
[594]	valid_0's auc: 0.888594
[595]	valid_0's auc: 0.888598
[596]	valid_0's auc: 0.888602
[597]	valid_0's auc: 0.888617
[598]	valid_0's auc: 0.888601
[599]	valid_0's auc: 0.888628
[600]	valid_0's auc: 0.888664
[601]	valid_0's auc: 0.888683
[602]	valid_0's auc: 0.888699
[603]	valid_0's auc: 0.888746
[604]	valid_0's auc: 0.888774
[605]	valid_0's auc: 0.888786
[606]	valid_0's auc: 0.888797
[607]	valid_0's auc: 0.888765
[608]	valid_0's auc: 0.888817
[609]	valid_0's auc: 0.888815
[610]	valid_0's auc: 0.888852
[611]	valid_0's auc: 0.888865
[612]	valid_0's auc: 0.888858
[613]	valid_0's auc: 0.888864
[614]	valid_0's auc: 0.888886
[615]	valid_0's auc: 0.888932
[616]	valid_0's auc: 0.888945
[617]	valid_0's auc: 0.888984
[618]	valid_0's auc: 0.889009
[619]	valid_0's auc: 0.889078
[620]	valid_0's auc: 0.889036
[621]	valid_0's auc: 0.889005
[622]	valid_0's auc: 0.889028
[623]	valid_0's auc: 0.889035
[624]	valid_0's auc: 0.889061
[625]	valid_0's auc: 0.889053
[626]	valid_0's auc: 0.889055
[627]	valid_0's auc: 0.889052
[628]	valid_0's auc: 0.889057
[629]	valid_0's auc: 0.889007
[630]	valid_0's auc: 0.889033
[631]	valid_0's auc: 0.889087
[632]	valid_0's auc: 0.889091
[633]	valid_0's auc: 0.889085
[634]	valid_0's auc: 0.889125
[635]	valid_0's auc: 0.889172
[636]	valid_0's auc: 0.889181
[637]	valid_0's auc: 0.889174
[638]	valid_0's auc: 0.889184
[639]	valid_0's auc: 0.889237
[640]	valid_0's auc: 0.889211
[641]	valid_0's auc: 0.889213
[642]	valid_0's auc: 0.889213
[643]	valid_0's auc: 0.889185
[644]	valid_0's auc: 0.889202
[645]	valid_0's auc: 0.889217
[646]	valid_0's auc: 0.889243
[647]	valid_0's auc: 0.889223
[648]	valid_0's auc: 0.889214
[649]	valid_0's auc: 0.889184
[650]	valid_0's auc: 0.88921
[651]	valid_0's auc: 0.889214
[652]	valid_0's auc: 0.889211
[653]	valid_0's auc: 0.889257
[654]	valid_0's auc: 0.889222
[655]	valid_0's auc: 0.889235
[656]	valid_0's auc: 0.889259
[657]	valid_0's auc: 0.889234
[658]	valid_0's auc: 0.889217
[659]	valid_0's auc: 0.889206
[660]	valid_0's auc: 0.889262
[661]	valid_0's auc: 0.889242
[662]	valid_0's auc: 0.889282
[663]	valid_0's auc: 0.889309
[664]	valid_0's auc: 0.889309
[665]	valid_0's auc: 0.889349
[666]	valid_0's auc: 0.889323
[667]	valid_0's auc: 0.889329
[668]	valid_0's auc: 0.889311
[669]	valid_0's auc: 0.889267
[670]	valid_0's auc: 0.889288
[671]	valid_0's auc: 0.889276
[672]	valid_0's auc: 0.889277
[673]	valid_0's auc: 0.889245
[674]	valid_0's auc: 0.889264
[675]	valid_0's auc: 0.889287
[676]	valid_0's auc: 0.889329
[677]	valid_0's auc: 0.889365
[678]	valid_0's auc: 0.889345
[679]	valid_0's auc: 0.88938
[680]	valid_0's auc: 0.889391
[681]	valid_0's auc: 0.889345
[682]	valid_0's auc: 0.889354
[683]	valid_0's auc: 0.889361
[684]	valid_0's auc: 0.889386
[685]	valid_0's auc: 0.889372
[686]	valid_0's auc: 0.889335
[687]	valid_0's auc: 0.889373
[688]	valid_0's auc: 0.889418
[689]	valid_0's auc: 0.889404
[690]	valid_0's auc: 0.889403
[691]	valid_0's auc: 0.889398
[692]	valid_0's auc: 0.889381
[693]	valid_0's auc: 0.889381
[694]	valid_0's auc: 0.88938
[695]	valid_0's auc: 0.889353
[696]	valid_0's auc: 0.889359
[697]	valid_0's auc: 0.889373
[698]	valid_0's auc: 0.889372
[699]	valid_0's auc: 0.889366
[700]	valid_0's auc: 0.889361
[701]	valid_0's auc: 0.889356
[702]	valid_0's auc: 0.889352
[703]	valid_0's auc: 0.889337
[704]	valid_0's auc: 0.889345
[705]	valid_0's auc: 0.889313
[706]	valid_0's auc: 0.889341
[707]	valid_0's auc: 0.889327
[708]	valid_0's auc: 0.889293
[709]	valid_0's auc: 0.88929
[710]	valid_0's auc: 0.889313
[711]	valid_0's auc: 0.88933
[712]	valid_0's auc: 0.889335
[713]	valid_0's auc: 0.889331
[714]	valid_0's auc: 0.889333
[715]	valid_0's auc: 0.889372
[716]	valid_0's auc: 0.889366
[717]	valid_0's auc: 0.889367
[718]	valid_0's auc: 0.889389
[719]	valid_0's auc: 0.889374
[720]	valid_0's auc: 0.889368
[721]	valid_0's auc: 0.889361
[722]	valid_0's auc: 0.889367
[723]	valid_0's auc: 0.889362
[724]	valid_0's auc: 0.889355
[725]	valid_0's auc: 0.889318
[726]	valid_0's auc: 0.889303
[727]	valid_0's auc: 0.889286
[728]	valid_0's auc: 0.889288
[729]	valid_0's auc: 0.88925
[730]	valid_0's auc: 0.889173
[731]	valid_0's auc: 0.889203
[732]	valid_0's auc: 0.8892
[733]	valid_0's auc: 0.889206
[734]	valid_0's auc: 0.88924
[735]	valid_0's auc: 0.889218
[736]	valid_0's auc: 0.889193
[737]	valid_0's auc: 0.889216
[738]	valid_0's auc: 0.889226
[739]	valid_0's auc: 0.889198
[740]	valid_0's auc: 0.889214
[741]	valid_0's auc: 0.889223
[742]	valid_0's auc: 0.889227
[743]	valid_0's auc: 0.889182
[744]	valid_0's auc: 0.889213
[745]	valid_0's auc: 0.889185
[746]	valid_0's auc: 0.88924
[747]	valid_0's auc: 0.889233
[748]	valid_0's auc: 0.889254
[749]	valid_0's auc: 0.889251
[750]	valid_0's auc: 0.889268
[751]	valid_0's auc: 0.889289
[752]	valid_0's auc: 0.889306
[753]	valid_0's auc: 0.889296
[754]	valid_0's auc: 0.88931
[755]	valid_0's auc: 0.8893
[756]	valid_0's auc: 0.889301
[757]	valid_0's auc: 0.8893
[758]	valid_0's auc: 0.889323
[759]	valid_0's auc: 0.889294
[760]	valid_0's auc: 0.88926
[761]	valid_0's auc: 0.889243
[762]	valid_0's auc: 0.889198
[763]	valid_0's auc: 0.889158
[764]	valid_0's auc: 0.889128
[765]	valid_0's auc: 0.889136
[766]	valid_0's auc: 0.88916
[767]	valid_0's auc: 0.889172
[768]	valid_0's auc: 0.889123
[769]	valid_0's auc: 0.889108
[770]	valid_0's auc: 0.889081
[771]	valid_0's auc: 0.889074
[772]	valid_0's auc: 0.889042
[773]	valid_0's auc: 0.889024
[774]	valid_0's auc: 0.88901
[775]	valid_0's auc: 0.889023
[776]	valid_0's auc: 0.889001
[777]	valid_0's auc: 0.888974
[778]	valid_0's auc: 0.888944
[779]	valid_0's auc: 0.888948
[780]	valid_0's auc: 0.889017
[781]	valid_0's auc: 0.889019
[782]	valid_0's auc: 0.888974
[783]	valid_0's auc: 0.888957
[784]	valid_0's auc: 0.888947
[785]	valid_0's auc: 0.888928
[786]	valid_0's auc: 0.888961
[787]	valid_0's auc: 0.888954
[788]	valid_0's auc: 0.888936
Early stopping, best iteration is:
[688]	valid_0's auc: 0.889418
Done Training.
#+end_example

Interestingly, upweighting positive examples didn't seem to improve auc (if anything it hurt). More on this.

Check feature importance:

#+BEGIN_SRC python :session :results file
# feature importances
# print('Feature importances:', list(gbm.feature_importance()))

lgb.plot_importance(gbm, max_num_features=20)
plt.savefig('feature_importance.png')
plt.close 
'feature_importance.png'
#+END_SRC

#+RESULTS:
[[file:feature_importance.png]]

* TODO Feature Engineering

We've noticed a lot of repeated entries within features, which perhaps indicates our anonymous features behave more like categorical variables than numerical variables. 

#+BEGIN_SRC python :session :results output 
train_df_copy = train_dataframe.copy()
validation_df_copy = validation_dataframe.copy()
#+END_SRC

#+RESULTS:

Don't necessarily need the next scaling function:

#+BEGIN_SRC python :session :results output 
# def min_max_scale_dataframe(dataframe, train_dataframe):

#     # scale each feature independently to the range [0,1] and apply the tranformation determined by 'train_dataframe' to 'dataframe'
#     min = train_dataframe.min()
#     max = train_dataframe.max()

#     return (dataframe - min)/(max - min)

# scale train and validation according to data in train
#+END_SRC

#+RESULTS:

Let's try binning and one-hot encoding our data:

#+BEGIN_SRC python :session :results output
class BinAndOneHot:
    """
    Tools to calculate bins for training data and then one-hot encode any any dataframe according to the bins determined by the training data.

    Attributes:
        num_bins (int): Number of bins to use for each feature (currently same number must be used for all features)
        bins (numpy ndarray): List of bins determined by training data
    """
    def __init__(self):
        self.num_bins = None
        self.bins = None

    def fit(self, train_dataframe, num_bins):
        """
        Calculates equal width bins for each feature of training data, to be used for consistently binning training, validation, and test data. First and last bins are extended to include +-infinity.

        Args:
            train_dataframe (pandas dataframe): Training data
            num_bins (int): Number of bins for each feature

        Attributes:
            self.num_bins (int): Number of bins is stored as this class Attribute
            self.bins (numpy ndarray): List of bins is assigned to this class Attribute

        Returns:
            None
        """
        # store 'num_bins' as a class attribute so that we use the same number of bins for other functions in this class
        self.num_bins = num_bins

        # populate bins_list with binned features by looping over 'train_dataframe columns'
        bins_list = []
        for column in train_dataframe.columns:

            # we don't need the binned dataframe, just the bins
            _, bins = pd.cut(train_dataframe[column], bins=self.num_bins, retbins=True)

            # extend first and last bins to include +-infinity
            bins = np.concatenate(([-np.inf], bins[1:-1], [np.inf]))

            # store the result of binning this column in bins_list
            bins_list.append(bins)

        # Assign bins_list to class Attribute to be used in other functions in this class
        self.bins = bins_list

        print("Done calculating bins. List of bins stored as class attribute self.bins.")

        return None

    def transform(self, dataframe):
        """
        Bins each column of a dataframe into bins determined by the training data. Then creates new features one-hot encoding these bins.

        Args:
            dataframe (pandas dataframe): Dataframe to be transormed

        Returns:
            one_hot_bins_dataframe (pandas dataframe): Dataframe of features that one-hot encode our data according to training data bins
        """
        # bin dataframe according to self.bins (determined by training data)
        i = 0
        for column in dataframe.columns:
            dataframe[column] = pd.cut(dataframe[column], bins=self.bins[i])
            i += 1

        # one-hot encoding our binned data
        one_hot_bins_dataframe = pd.get_dummies(dataframe)

        return one_hot_bins_dataframe
#+END_SRC

#+RESULTS:

One-hot encode training and validation data:

#+BEGIN_SRC python :session :results output
bin_and_one_hot = BinAndOneHot()

# calculate binning
num_bins = 10
bin_and_one_hot.fit(train_dataframe=train_df_copy, num_bins=num_bins)

# bin and one-hot encode training and validation data
one_hot_train = bin_and_one_hot.transform(train_df_copy)
one_hot_validation = bin_and_one_hot.transform(validation_df_copy)
#+END_SRC

#+RESULTS:
: Done calculating bins. List of bins stored as class attribute self.bins.

LightGBM complains about commas in column names, so let's fix that

#+BEGIN_SRC python :session :output results
print(one_hot_validation.head(), one_hot_validation.describe())

# replaces all column name symbols that LightGBM doesn't like with "_'
for dataframe in [one_hot_train, one_hot_validation]:
    dataframe.columns = ["".join (c if c.isalnum() else "_" for c in str(x)) for x in dataframe.columns]

print(one_hot_validation.head(), one_hot_validation.describe())
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results output
# add one-hot features to dataframe of original features
one_hot_train = np.array(pd.concat([train_dataframe, one_hot_train], axis=1))
one_hot_validation = np.array(pd.concat([validation_dataframe, one_hot_validation], axis=1))
#+END_SRC

#+RESULTS:

So far: our new features alone can get us auc 0.88, but combining them with old features shows feature importance dominated by old features.

#+BEGIN_SRC python :session :results output
import lightgbm as lgb

# create dataset for lightgbm
lgb_train = lgb.Dataset(one_hot_train, train_labels)
lgb_eval = lgb.Dataset(one_hot_validation,
                       validation_labels,
                       reference=lgb_train)

random_state = 42

params = {
    # default num_trees=100
    'num_trees': 2500,
    'objective': 'binary',
    'metric': 'auc',
    'num_leaves': 13,
    'learning_rate': 0.04,
    'boost_from_average': 'false',
    # Percentage of features to be used for each tree
    'feature_fraction': 1.0,
    'min_data_in_leaf': 80,
    # Percentage of data to be sampled for each tree
    'bagging_fraction': 0.4,
    # Perform bagging at every k-th tree (bagging_freq must be non-zero for bagging_fraction to be used)
    'bagging_freq': 5,
    # Documentation recommends using number of available cores, not number of available threads
    'num_threads': 7,
    "bagging_seed" : random_state,
    "seed": random_state
}

print('Starting training...')

# train
gbm = lgb.train(params,
                lgb_train,
                valid_sets=lgb_eval,
                early_stopping_rounds=50)

print('Done Training.')
#+END_SRC

#+RESULTS:
#+begin_example
Starting training...
[LightGBM] [Warning] Starting from the 2.1.2 version, default value for the "boost_from_average" parameter in "binary" objective is true.
This may cause significantly different results comparing to the previous versions of LightGBM.
Try to set boost_from_average=false, if your old models produce bad results
[LightGBM] [Info] Number of positive: 12849, number of negative: 115151
[LightGBM] [Info] Total Bins 3610
[LightGBM] [Info] Number of data: 128000, number of used features: 1805
[1]	valid_0's auc: 0.553897
Training until validation scores don't improve for 50 rounds
[2]	valid_0's auc: 0.595231
[3]	valid_0's auc: 0.619513
[4]	valid_0's auc: 0.634705
[5]	valid_0's auc: 0.639121
[6]	valid_0's auc: 0.648223
[7]	valid_0's auc: 0.668614
[8]	valid_0's auc: 0.675992
[9]	valid_0's auc: 0.679782
[10]	valid_0's auc: 0.692426
[11]	valid_0's auc: 0.694575
[12]	valid_0's auc: 0.701195
[13]	valid_0's auc: 0.707359
[14]	valid_0's auc: 0.710054
[15]	valid_0's auc: 0.7101
[16]	valid_0's auc: 0.71257
[17]	valid_0's auc: 0.714906
[18]	valid_0's auc: 0.721266
[19]	valid_0's auc: 0.723843
[20]	valid_0's auc: 0.734719
[21]	valid_0's auc: 0.738278
[22]	valid_0's auc: 0.743666
[23]	valid_0's auc: 0.747435
[24]	valid_0's auc: 0.75459
[25]	valid_0's auc: 0.76333
[26]	valid_0's auc: 0.768342
[27]	valid_0's auc: 0.768612
[28]	valid_0's auc: 0.774127
[29]	valid_0's auc: 0.775274
[30]	valid_0's auc: 0.776607
[31]	valid_0's auc: 0.77949
[32]	valid_0's auc: 0.78161
[33]	valid_0's auc: 0.786484
[34]	valid_0's auc: 0.79121
[35]	valid_0's auc: 0.792734
[36]	valid_0's auc: 0.794091
[37]	valid_0's auc: 0.797742
[38]	valid_0's auc: 0.799904
[39]	valid_0's auc: 0.800731
[40]	valid_0's auc: 0.800337
[41]	valid_0's auc: 0.801283
[42]	valid_0's auc: 0.803743
[43]	valid_0's auc: 0.803687
[44]	valid_0's auc: 0.804256
[45]	valid_0's auc: 0.802427
[46]	valid_0's auc: 0.803583
[47]	valid_0's auc: 0.803631
[48]	valid_0's auc: 0.802723
[49]	valid_0's auc: 0.80471
[50]	valid_0's auc: 0.805646
[51]	valid_0's auc: 0.80473
[52]	valid_0's auc: 0.809591
[53]	valid_0's auc: 0.809023
[54]	valid_0's auc: 0.810842
[55]	valid_0's auc: 0.811298
[56]	valid_0's auc: 0.812898
[57]	valid_0's auc: 0.815013
[58]	valid_0's auc: 0.814788
[59]	valid_0's auc: 0.814208
[60]	valid_0's auc: 0.814177
[61]	valid_0's auc: 0.814273
[62]	valid_0's auc: 0.81576
[63]	valid_0's auc: 0.81474
[64]	valid_0's auc: 0.81578
[65]	valid_0's auc: 0.815177
[66]	valid_0's auc: 0.815239
[67]	valid_0's auc: 0.814721
[68]	valid_0's auc: 0.814278
[69]	valid_0's auc: 0.814437
[70]	valid_0's auc: 0.815191
[71]	valid_0's auc: 0.816284
[72]	valid_0's auc: 0.817224
[73]	valid_0's auc: 0.817556
[74]	valid_0's auc: 0.81607
[75]	valid_0's auc: 0.818155
[76]	valid_0's auc: 0.819477
[77]	valid_0's auc: 0.817624
[78]	valid_0's auc: 0.818757
[79]	valid_0's auc: 0.819257
[80]	valid_0's auc: 0.81952
[81]	valid_0's auc: 0.819375
[82]	valid_0's auc: 0.81923
[83]	valid_0's auc: 0.819611
[84]	valid_0's auc: 0.82083
[85]	valid_0's auc: 0.821907
[86]	valid_0's auc: 0.823684
[87]	valid_0's auc: 0.824758
[88]	valid_0's auc: 0.824719
[89]	valid_0's auc: 0.825316
[90]	valid_0's auc: 0.825807
[91]	valid_0's auc: 0.825808
[92]	valid_0's auc: 0.826364
[93]	valid_0's auc: 0.826469
[94]	valid_0's auc: 0.826378
[95]	valid_0's auc: 0.826674
[96]	valid_0's auc: 0.826761
[97]	valid_0's auc: 0.826482
[98]	valid_0's auc: 0.827129
[99]	valid_0's auc: 0.82617
[100]	valid_0's auc: 0.826472
[101]	valid_0's auc: 0.827256
[102]	valid_0's auc: 0.827647
[103]	valid_0's auc: 0.827955
[104]	valid_0's auc: 0.82838
[105]	valid_0's auc: 0.828569
[106]	valid_0's auc: 0.829769
[107]	valid_0's auc: 0.830744
[108]	valid_0's auc: 0.831028
[109]	valid_0's auc: 0.831504
[110]	valid_0's auc: 0.83077
[111]	valid_0's auc: 0.830968
[112]	valid_0's auc: 0.831014
[113]	valid_0's auc: 0.83102
[114]	valid_0's auc: 0.831515
[115]	valid_0's auc: 0.831986
[116]	valid_0's auc: 0.831476
[117]	valid_0's auc: 0.831836
[118]	valid_0's auc: 0.83214
[119]	valid_0's auc: 0.832458
[120]	valid_0's auc: 0.831922
[121]	valid_0's auc: 0.832197
[122]	valid_0's auc: 0.833116
[123]	valid_0's auc: 0.833007
[124]	valid_0's auc: 0.833376
[125]	valid_0's auc: 0.833793
[126]	valid_0's auc: 0.834321
[127]	valid_0's auc: 0.834514
[128]	valid_0's auc: 0.835542
[129]	valid_0's auc: 0.835948
[130]	valid_0's auc: 0.836531
[131]	valid_0's auc: 0.83703
[132]	valid_0's auc: 0.837612
[133]	valid_0's auc: 0.838014
[134]	valid_0's auc: 0.838152
[135]	valid_0's auc: 0.838614
[136]	valid_0's auc: 0.838677
[137]	valid_0's auc: 0.838745
[138]	valid_0's auc: 0.838688
[139]	valid_0's auc: 0.838999
[140]	valid_0's auc: 0.839081
[141]	valid_0's auc: 0.839584
[142]	valid_0's auc: 0.84008
[143]	valid_0's auc: 0.840313
[144]	valid_0's auc: 0.840344
[145]	valid_0's auc: 0.840519
[146]	valid_0's auc: 0.840871
[147]	valid_0's auc: 0.841112
[148]	valid_0's auc: 0.840688
[149]	valid_0's auc: 0.840951
[150]	valid_0's auc: 0.840806
[151]	valid_0's auc: 0.84117
[152]	valid_0's auc: 0.84124
[153]	valid_0's auc: 0.841603
[154]	valid_0's auc: 0.841458
[155]	valid_0's auc: 0.841984
[156]	valid_0's auc: 0.842138
[157]	valid_0's auc: 0.842596
[158]	valid_0's auc: 0.842756
[159]	valid_0's auc: 0.842907
[160]	valid_0's auc: 0.843166
[161]	valid_0's auc: 0.842921
[162]	valid_0's auc: 0.842891
[163]	valid_0's auc: 0.843062
[164]	valid_0's auc: 0.843502
[165]	valid_0's auc: 0.843953
[166]	valid_0's auc: 0.844094
[167]	valid_0's auc: 0.843769
[168]	valid_0's auc: 0.843881
[169]	valid_0's auc: 0.844151
[170]	valid_0's auc: 0.844047
[171]	valid_0's auc: 0.844343
[172]	valid_0's auc: 0.844913
[173]	valid_0's auc: 0.845108
[174]	valid_0's auc: 0.845265
[175]	valid_0's auc: 0.845446
[176]	valid_0's auc: 0.845705
[177]	valid_0's auc: 0.846273
[178]	valid_0's auc: 0.846514
[179]	valid_0's auc: 0.846458
[180]	valid_0's auc: 0.846928
[181]	valid_0's auc: 0.847148
[182]	valid_0's auc: 0.847136
[183]	valid_0's auc: 0.847296
[184]	valid_0's auc: 0.847326
[185]	valid_0's auc: 0.847482
[186]	valid_0's auc: 0.847426
[187]	valid_0's auc: 0.847416
[188]	valid_0's auc: 0.847596
[189]	valid_0's auc: 0.847745
[190]	valid_0's auc: 0.847369
[191]	valid_0's auc: 0.8475
[192]	valid_0's auc: 0.847314
[193]	valid_0's auc: 0.847517
[194]	valid_0's auc: 0.847636
[195]	valid_0's auc: 0.847588
[196]	valid_0's auc: 0.847678
[197]	valid_0's auc: 0.847517
[198]	valid_0's auc: 0.848002
[199]	valid_0's auc: 0.848139
[200]	valid_0's auc: 0.848599
[201]	valid_0's auc: 0.848758
[202]	valid_0's auc: 0.849201
[203]	valid_0's auc: 0.849618
[204]	valid_0's auc: 0.849806
[205]	valid_0's auc: 0.849602
[206]	valid_0's auc: 0.849176
[207]	valid_0's auc: 0.849454
[208]	valid_0's auc: 0.849684
[209]	valid_0's auc: 0.849803
[210]	valid_0's auc: 0.849787
[211]	valid_0's auc: 0.849984
[212]	valid_0's auc: 0.850167
[213]	valid_0's auc: 0.850231
[214]	valid_0's auc: 0.850615
[215]	valid_0's auc: 0.85077
[216]	valid_0's auc: 0.850748
[217]	valid_0's auc: 0.851076
[218]	valid_0's auc: 0.850966
[219]	valid_0's auc: 0.851173
[220]	valid_0's auc: 0.851238
[221]	valid_0's auc: 0.851326
[222]	valid_0's auc: 0.851504
[223]	valid_0's auc: 0.851659
[224]	valid_0's auc: 0.851748
[225]	valid_0's auc: 0.851716
[226]	valid_0's auc: 0.851803
[227]	valid_0's auc: 0.85198
[228]	valid_0's auc: 0.851927
[229]	valid_0's auc: 0.851752
[230]	valid_0's auc: 0.851904
[231]	valid_0's auc: 0.851972
[232]	valid_0's auc: 0.852037
[233]	valid_0's auc: 0.852175
[234]	valid_0's auc: 0.851908
[235]	valid_0's auc: 0.852011
[236]	valid_0's auc: 0.85213
[237]	valid_0's auc: 0.85243
[238]	valid_0's auc: 0.852763
[239]	valid_0's auc: 0.852759
[240]	valid_0's auc: 0.852891
[241]	valid_0's auc: 0.853003
[242]	valid_0's auc: 0.853099
[243]	valid_0's auc: 0.853137
[244]	valid_0's auc: 0.853196
[245]	valid_0's auc: 0.853105
[246]	valid_0's auc: 0.853076
[247]	valid_0's auc: 0.853115
[248]	valid_0's auc: 0.853363
[249]	valid_0's auc: 0.853556
[250]	valid_0's auc: 0.853688
[251]	valid_0's auc: 0.853806
[252]	valid_0's auc: 0.853956
[253]	valid_0's auc: 0.853937
[254]	valid_0's auc: 0.854193
[255]	valid_0's auc: 0.854479
[256]	valid_0's auc: 0.854595
[257]	valid_0's auc: 0.85459
[258]	valid_0's auc: 0.854461
[259]	valid_0's auc: 0.854437
[260]	valid_0's auc: 0.854446
[261]	valid_0's auc: 0.85467
[262]	valid_0's auc: 0.854793
[263]	valid_0's auc: 0.855
[264]	valid_0's auc: 0.855092
[265]	valid_0's auc: 0.854955
[266]	valid_0's auc: 0.855228
[267]	valid_0's auc: 0.855238
[268]	valid_0's auc: 0.855419
[269]	valid_0's auc: 0.855281
[270]	valid_0's auc: 0.855252
[271]	valid_0's auc: 0.855357
[272]	valid_0's auc: 0.855268
[273]	valid_0's auc: 0.855195
[274]	valid_0's auc: 0.85528
[275]	valid_0's auc: 0.855404
[276]	valid_0's auc: 0.855477
[277]	valid_0's auc: 0.855552
[278]	valid_0's auc: 0.855602
[279]	valid_0's auc: 0.855639
[280]	valid_0's auc: 0.855822
[281]	valid_0's auc: 0.855884
[282]	valid_0's auc: 0.855835
[283]	valid_0's auc: 0.856035
[284]	valid_0's auc: 0.856114
[285]	valid_0's auc: 0.856374
[286]	valid_0's auc: 0.856614
[287]	valid_0's auc: 0.856514
[288]	valid_0's auc: 0.856628
[289]	valid_0's auc: 0.856706
[290]	valid_0's auc: 0.856796
[291]	valid_0's auc: 0.856716
[292]	valid_0's auc: 0.856723
[293]	valid_0's auc: 0.856859
[294]	valid_0's auc: 0.856917
[295]	valid_0's auc: 0.856978
[296]	valid_0's auc: 0.857173
[297]	valid_0's auc: 0.857379
[298]	valid_0's auc: 0.857379
[299]	valid_0's auc: 0.857387
[300]	valid_0's auc: 0.857412
[301]	valid_0's auc: 0.857558
[302]	valid_0's auc: 0.857589
[303]	valid_0's auc: 0.857671
[304]	valid_0's auc: 0.857816
[305]	valid_0's auc: 0.857804
[306]	valid_0's auc: 0.857837
[307]	valid_0's auc: 0.857976
[308]	valid_0's auc: 0.857962
[309]	valid_0's auc: 0.858003
[310]	valid_0's auc: 0.858029
[311]	valid_0's auc: 0.858095
[312]	valid_0's auc: 0.858154
[313]	valid_0's auc: 0.85826
[314]	valid_0's auc: 0.858311
[315]	valid_0's auc: 0.858379
[316]	valid_0's auc: 0.858575
[317]	valid_0's auc: 0.858618
[318]	valid_0's auc: 0.858621
[319]	valid_0's auc: 0.858682
[320]	valid_0's auc: 0.858752
[321]	valid_0's auc: 0.858778
[322]	valid_0's auc: 0.858829
[323]	valid_0's auc: 0.858909
[324]	valid_0's auc: 0.85896
[325]	valid_0's auc: 0.858973
[326]	valid_0's auc: 0.858965
[327]	valid_0's auc: 0.859044
[328]	valid_0's auc: 0.859066
[329]	valid_0's auc: 0.859065
[330]	valid_0's auc: 0.85899
[331]	valid_0's auc: 0.859137
[332]	valid_0's auc: 0.859108
[333]	valid_0's auc: 0.85914
[334]	valid_0's auc: 0.859421
[335]	valid_0's auc: 0.859463
[336]	valid_0's auc: 0.859661
[337]	valid_0's auc: 0.859693
[338]	valid_0's auc: 0.859809
[339]	valid_0's auc: 0.859837
[340]	valid_0's auc: 0.859904
[341]	valid_0's auc: 0.860007
[342]	valid_0's auc: 0.860048
[343]	valid_0's auc: 0.860178
[344]	valid_0's auc: 0.860251
[345]	valid_0's auc: 0.860399
[346]	valid_0's auc: 0.860516
[347]	valid_0's auc: 0.860604
[348]	valid_0's auc: 0.860612
[349]	valid_0's auc: 0.860676
[350]	valid_0's auc: 0.860672
[351]	valid_0's auc: 0.860676
[352]	valid_0's auc: 0.860685
[353]	valid_0's auc: 0.860776
[354]	valid_0's auc: 0.860809
[355]	valid_0's auc: 0.860922
[356]	valid_0's auc: 0.860948
[357]	valid_0's auc: 0.860961
[358]	valid_0's auc: 0.860869
[359]	valid_0's auc: 0.860963
[360]	valid_0's auc: 0.861027
[361]	valid_0's auc: 0.861128
[362]	valid_0's auc: 0.861099
[363]	valid_0's auc: 0.861198
[364]	valid_0's auc: 0.861196
[365]	valid_0's auc: 0.861303
[366]	valid_0's auc: 0.861356
[367]	valid_0's auc: 0.861349
[368]	valid_0's auc: 0.861361
[369]	valid_0's auc: 0.861461
[370]	valid_0's auc: 0.86148
[371]	valid_0's auc: 0.861536
[372]	valid_0's auc: 0.861372
[373]	valid_0's auc: 0.86146
[374]	valid_0's auc: 0.861447
[375]	valid_0's auc: 0.861516
[376]	valid_0's auc: 0.861559
[377]	valid_0's auc: 0.861633
[378]	valid_0's auc: 0.861688
[379]	valid_0's auc: 0.86172
[380]	valid_0's auc: 0.861832
[381]	valid_0's auc: 0.861856
[382]	valid_0's auc: 0.861999
[383]	valid_0's auc: 0.862041
[384]	valid_0's auc: 0.862063
[385]	valid_0's auc: 0.862205
[386]	valid_0's auc: 0.862186
[387]	valid_0's auc: 0.862149
[388]	valid_0's auc: 0.862209
[389]	valid_0's auc: 0.862309
[390]	valid_0's auc: 0.862315
[391]	valid_0's auc: 0.862416
[392]	valid_0's auc: 0.862466
[393]	valid_0's auc: 0.862505
[394]	valid_0's auc: 0.862492
[395]	valid_0's auc: 0.862712
[396]	valid_0's auc: 0.862782
[397]	valid_0's auc: 0.862743
[398]	valid_0's auc: 0.862742
[399]	valid_0's auc: 0.862789
[400]	valid_0's auc: 0.862856
[401]	valid_0's auc: 0.862907
[402]	valid_0's auc: 0.862993
[403]	valid_0's auc: 0.863121
[404]	valid_0's auc: 0.863162
[405]	valid_0's auc: 0.863198
[406]	valid_0's auc: 0.863248
[407]	valid_0's auc: 0.863342
[408]	valid_0's auc: 0.863453
[409]	valid_0's auc: 0.86346
[410]	valid_0's auc: 0.863507
[411]	valid_0's auc: 0.863587
[412]	valid_0's auc: 0.863617
[413]	valid_0's auc: 0.863665
[414]	valid_0's auc: 0.863641
[415]	valid_0's auc: 0.863684
[416]	valid_0's auc: 0.863695
[417]	valid_0's auc: 0.863814
[418]	valid_0's auc: 0.86377
[419]	valid_0's auc: 0.863871
[420]	valid_0's auc: 0.863957
[421]	valid_0's auc: 0.864007
[422]	valid_0's auc: 0.864056
[423]	valid_0's auc: 0.86416
[424]	valid_0's auc: 0.864228
[425]	valid_0's auc: 0.86425
[426]	valid_0's auc: 0.864302
[427]	valid_0's auc: 0.864395
[428]	valid_0's auc: 0.864351
[429]	valid_0's auc: 0.864354
[430]	valid_0's auc: 0.864368
[431]	valid_0's auc: 0.864337
[432]	valid_0's auc: 0.864385
[433]	valid_0's auc: 0.864532
[434]	valid_0's auc: 0.864534
[435]	valid_0's auc: 0.864521
[436]	valid_0's auc: 0.864565
[437]	valid_0's auc: 0.864471
[438]	valid_0's auc: 0.864434
[439]	valid_0's auc: 0.864404
[440]	valid_0's auc: 0.864399
[441]	valid_0's auc: 0.864435
[442]	valid_0's auc: 0.864435
[443]	valid_0's auc: 0.864553
[444]	valid_0's auc: 0.86462
[445]	valid_0's auc: 0.864615
[446]	valid_0's auc: 0.864588
[447]	valid_0's auc: 0.864669
[448]	valid_0's auc: 0.864703
[449]	valid_0's auc: 0.864781
[450]	valid_0's auc: 0.864881
[451]	valid_0's auc: 0.864899
[452]	valid_0's auc: 0.864989
[453]	valid_0's auc: 0.865031
[454]	valid_0's auc: 0.865018
[455]	valid_0's auc: 0.865137
[456]	valid_0's auc: 0.865241
[457]	valid_0's auc: 0.865253
[458]	valid_0's auc: 0.8653
[459]	valid_0's auc: 0.865344
[460]	valid_0's auc: 0.865358
[461]	valid_0's auc: 0.865402
[462]	valid_0's auc: 0.865428
[463]	valid_0's auc: 0.865509
[464]	valid_0's auc: 0.86555
[465]	valid_0's auc: 0.865626
[466]	valid_0's auc: 0.865783
[467]	valid_0's auc: 0.865827
[468]	valid_0's auc: 0.865761
[469]	valid_0's auc: 0.865837
[470]	valid_0's auc: 0.865869
[471]	valid_0's auc: 0.86591
[472]	valid_0's auc: 0.865872
[473]	valid_0's auc: 0.865904
[474]	valid_0's auc: 0.86588
[475]	valid_0's auc: 0.865987
[476]	valid_0's auc: 0.86608
[477]	valid_0's auc: 0.866129
[478]	valid_0's auc: 0.866208
[479]	valid_0's auc: 0.866265
[480]	valid_0's auc: 0.866298
[481]	valid_0's auc: 0.866335
[482]	valid_0's auc: 0.866312
[483]	valid_0's auc: 0.866233
[484]	valid_0's auc: 0.866295
[485]	valid_0's auc: 0.866314
[486]	valid_0's auc: 0.866319
[487]	valid_0's auc: 0.866418
[488]	valid_0's auc: 0.866414
[489]	valid_0's auc: 0.866467
[490]	valid_0's auc: 0.866528
[491]	valid_0's auc: 0.866616
[492]	valid_0's auc: 0.866681
[493]	valid_0's auc: 0.866772
[494]	valid_0's auc: 0.866834
[495]	valid_0's auc: 0.866922
[496]	valid_0's auc: 0.866903
[497]	valid_0's auc: 0.86697
[498]	valid_0's auc: 0.867046
[499]	valid_0's auc: 0.86705
[500]	valid_0's auc: 0.867156
[501]	valid_0's auc: 0.867246
[502]	valid_0's auc: 0.867353
[503]	valid_0's auc: 0.8674
[504]	valid_0's auc: 0.867444
[505]	valid_0's auc: 0.867543
[506]	valid_0's auc: 0.86751
[507]	valid_0's auc: 0.867464
[508]	valid_0's auc: 0.867479
[509]	valid_0's auc: 0.867441
[510]	valid_0's auc: 0.867489
[511]	valid_0's auc: 0.867484
[512]	valid_0's auc: 0.867572
[513]	valid_0's auc: 0.867609
[514]	valid_0's auc: 0.867664
[515]	valid_0's auc: 0.8677
[516]	valid_0's auc: 0.86772
[517]	valid_0's auc: 0.867729
[518]	valid_0's auc: 0.867753
[519]	valid_0's auc: 0.867829
[520]	valid_0's auc: 0.867891
[521]	valid_0's auc: 0.867813
[522]	valid_0's auc: 0.867869
[523]	valid_0's auc: 0.867889
[524]	valid_0's auc: 0.867932
[525]	valid_0's auc: 0.867943
[526]	valid_0's auc: 0.867926
[527]	valid_0's auc: 0.867966
[528]	valid_0's auc: 0.868023
[529]	valid_0's auc: 0.868025
[530]	valid_0's auc: 0.868019
[531]	valid_0's auc: 0.868035
[532]	valid_0's auc: 0.868108
[533]	valid_0's auc: 0.868109
[534]	valid_0's auc: 0.86808
[535]	valid_0's auc: 0.868158
[536]	valid_0's auc: 0.86824
[537]	valid_0's auc: 0.868318
[538]	valid_0's auc: 0.868317
[539]	valid_0's auc: 0.868398
[540]	valid_0's auc: 0.86839
[541]	valid_0's auc: 0.868456
[542]	valid_0's auc: 0.868476
[543]	valid_0's auc: 0.868478
[544]	valid_0's auc: 0.868551
[545]	valid_0's auc: 0.868559
[546]	valid_0's auc: 0.868586
[547]	valid_0's auc: 0.868608
[548]	valid_0's auc: 0.868602
[549]	valid_0's auc: 0.868619
[550]	valid_0's auc: 0.868629
[551]	valid_0's auc: 0.868646
[552]	valid_0's auc: 0.868651
[553]	valid_0's auc: 0.868719
[554]	valid_0's auc: 0.868766
[555]	valid_0's auc: 0.868823
[556]	valid_0's auc: 0.868882
[557]	valid_0's auc: 0.8689
[558]	valid_0's auc: 0.869006
[559]	valid_0's auc: 0.869011
[560]	valid_0's auc: 0.869002
[561]	valid_0's auc: 0.869072
[562]	valid_0's auc: 0.869053
[563]	valid_0's auc: 0.869073
[564]	valid_0's auc: 0.869049
[565]	valid_0's auc: 0.869049
[566]	valid_0's auc: 0.869142
[567]	valid_0's auc: 0.869134
[568]	valid_0's auc: 0.869155
[569]	valid_0's auc: 0.869199
[570]	valid_0's auc: 0.869242
[571]	valid_0's auc: 0.86932
[572]	valid_0's auc: 0.869369
[573]	valid_0's auc: 0.869404
[574]	valid_0's auc: 0.869389
[575]	valid_0's auc: 0.869463
[576]	valid_0's auc: 0.869568
[577]	valid_0's auc: 0.8696
[578]	valid_0's auc: 0.869701
[579]	valid_0's auc: 0.869713
[580]	valid_0's auc: 0.869756
[581]	valid_0's auc: 0.869794
[582]	valid_0's auc: 0.869827
[583]	valid_0's auc: 0.869879
[584]	valid_0's auc: 0.869909
[585]	valid_0's auc: 0.869951
[586]	valid_0's auc: 0.86998
[587]	valid_0's auc: 0.870006
[588]	valid_0's auc: 0.870031
[589]	valid_0's auc: 0.870126
[590]	valid_0's auc: 0.870189
[591]	valid_0's auc: 0.870263
[592]	valid_0's auc: 0.870266
[593]	valid_0's auc: 0.870358
[594]	valid_0's auc: 0.87036
[595]	valid_0's auc: 0.87036
[596]	valid_0's auc: 0.870309
[597]	valid_0's auc: 0.870349
[598]	valid_0's auc: 0.870408
[599]	valid_0's auc: 0.870465
[600]	valid_0's auc: 0.870563
[601]	valid_0's auc: 0.870566
[602]	valid_0's auc: 0.870619
[603]	valid_0's auc: 0.870686
[604]	valid_0's auc: 0.870754
[605]	valid_0's auc: 0.870753
[606]	valid_0's auc: 0.870783
[607]	valid_0's auc: 0.87085
[608]	valid_0's auc: 0.870881
[609]	valid_0's auc: 0.870941
[610]	valid_0's auc: 0.870945
[611]	valid_0's auc: 0.870964
[612]	valid_0's auc: 0.871009
[613]	valid_0's auc: 0.870959
[614]	valid_0's auc: 0.870958
[615]	valid_0's auc: 0.870951
[616]	valid_0's auc: 0.871039
[617]	valid_0's auc: 0.871072
[618]	valid_0's auc: 0.871093
[619]	valid_0's auc: 0.871116
[620]	valid_0's auc: 0.871132
[621]	valid_0's auc: 0.871167
[622]	valid_0's auc: 0.87126
[623]	valid_0's auc: 0.871292
[624]	valid_0's auc: 0.871339
[625]	valid_0's auc: 0.871393
[626]	valid_0's auc: 0.871396
[627]	valid_0's auc: 0.87141
[628]	valid_0's auc: 0.87145
[629]	valid_0's auc: 0.871482
[630]	valid_0's auc: 0.871523
[631]	valid_0's auc: 0.871546
[632]	valid_0's auc: 0.87153
[633]	valid_0's auc: 0.871619
[634]	valid_0's auc: 0.871646
[635]	valid_0's auc: 0.871616
[636]	valid_0's auc: 0.871548
[637]	valid_0's auc: 0.871561
[638]	valid_0's auc: 0.871562
[639]	valid_0's auc: 0.871638
[640]	valid_0's auc: 0.871679
[641]	valid_0's auc: 0.871711
[642]	valid_0's auc: 0.871706
[643]	valid_0's auc: 0.871735
[644]	valid_0's auc: 0.871774
[645]	valid_0's auc: 0.871861
[646]	valid_0's auc: 0.87196
[647]	valid_0's auc: 0.872051
[648]	valid_0's auc: 0.872073
[649]	valid_0's auc: 0.872101
[650]	valid_0's auc: 0.872146
[651]	valid_0's auc: 0.872193
[652]	valid_0's auc: 0.872157
[653]	valid_0's auc: 0.87216
[654]	valid_0's auc: 0.872222
[655]	valid_0's auc: 0.872218
[656]	valid_0's auc: 0.872254
[657]	valid_0's auc: 0.872286
[658]	valid_0's auc: 0.872304
[659]	valid_0's auc: 0.87227
[660]	valid_0's auc: 0.872282
[661]	valid_0's auc: 0.872297
[662]	valid_0's auc: 0.872335
[663]	valid_0's auc: 0.87228
[664]	valid_0's auc: 0.872287
[665]	valid_0's auc: 0.872292
[666]	valid_0's auc: 0.872288
[667]	valid_0's auc: 0.87227
[668]	valid_0's auc: 0.872285
[669]	valid_0's auc: 0.872337
[670]	valid_0's auc: 0.872319
[671]	valid_0's auc: 0.872336
[672]	valid_0's auc: 0.872411
[673]	valid_0's auc: 0.87239
[674]	valid_0's auc: 0.872408
[675]	valid_0's auc: 0.872419
[676]	valid_0's auc: 0.872481
[677]	valid_0's auc: 0.872455
[678]	valid_0's auc: 0.872501
[679]	valid_0's auc: 0.872543
[680]	valid_0's auc: 0.87253
[681]	valid_0's auc: 0.872593
[682]	valid_0's auc: 0.872554
[683]	valid_0's auc: 0.872526
[684]	valid_0's auc: 0.872515
[685]	valid_0's auc: 0.8725
[686]	valid_0's auc: 0.872562
[687]	valid_0's auc: 0.872578
[688]	valid_0's auc: 0.872597
[689]	valid_0's auc: 0.872597
[690]	valid_0's auc: 0.872546
[691]	valid_0's auc: 0.872603
[692]	valid_0's auc: 0.872664
[693]	valid_0's auc: 0.87266
[694]	valid_0's auc: 0.872708
[695]	valid_0's auc: 0.87274
[696]	valid_0's auc: 0.872725
[697]	valid_0's auc: 0.872747
[698]	valid_0's auc: 0.872778
[699]	valid_0's auc: 0.872816
[700]	valid_0's auc: 0.872796
[701]	valid_0's auc: 0.8728
[702]	valid_0's auc: 0.872797
[703]	valid_0's auc: 0.872884
[704]	valid_0's auc: 0.87299
[705]	valid_0's auc: 0.873027
[706]	valid_0's auc: 0.873024
[707]	valid_0's auc: 0.873033
[708]	valid_0's auc: 0.873045
[709]	valid_0's auc: 0.873103
[710]	valid_0's auc: 0.8731
[711]	valid_0's auc: 0.87312
[712]	valid_0's auc: 0.873115
[713]	valid_0's auc: 0.873121
[714]	valid_0's auc: 0.873071
[715]	valid_0's auc: 0.873073
[716]	valid_0's auc: 0.873106
[717]	valid_0's auc: 0.873105
[718]	valid_0's auc: 0.873108
[719]	valid_0's auc: 0.873138
[720]	valid_0's auc: 0.873128
[721]	valid_0's auc: 0.873107
[722]	valid_0's auc: 0.873131
[723]	valid_0's auc: 0.8732
[724]	valid_0's auc: 0.873285
[725]	valid_0's auc: 0.873294
[726]	valid_0's auc: 0.873336
[727]	valid_0's auc: 0.873394
[728]	valid_0's auc: 0.873433
[729]	valid_0's auc: 0.873478
[730]	valid_0's auc: 0.873484
[731]	valid_0's auc: 0.873542
[732]	valid_0's auc: 0.873604
[733]	valid_0's auc: 0.873693
[734]	valid_0's auc: 0.873718
[735]	valid_0's auc: 0.873762
[736]	valid_0's auc: 0.873866
[737]	valid_0's auc: 0.873883
[738]	valid_0's auc: 0.873915
[739]	valid_0's auc: 0.873919
[740]	valid_0's auc: 0.873996
[741]	valid_0's auc: 0.874048
[742]	valid_0's auc: 0.874012
[743]	valid_0's auc: 0.874079
[744]	valid_0's auc: 0.874165
[745]	valid_0's auc: 0.874162
[746]	valid_0's auc: 0.874155
[747]	valid_0's auc: 0.874153
[748]	valid_0's auc: 0.874152
[749]	valid_0's auc: 0.87419
[750]	valid_0's auc: 0.874164
[751]	valid_0's auc: 0.87418
[752]	valid_0's auc: 0.874233
[753]	valid_0's auc: 0.874318
[754]	valid_0's auc: 0.874337
[755]	valid_0's auc: 0.874347
[756]	valid_0's auc: 0.874373
[757]	valid_0's auc: 0.874393
[758]	valid_0's auc: 0.874396
[759]	valid_0's auc: 0.874432
[760]	valid_0's auc: 0.874445
[761]	valid_0's auc: 0.874509
[762]	valid_0's auc: 0.874489
[763]	valid_0's auc: 0.874522
[764]	valid_0's auc: 0.874541
[765]	valid_0's auc: 0.874583
[766]	valid_0's auc: 0.874624
[767]	valid_0's auc: 0.874706
[768]	valid_0's auc: 0.874728
[769]	valid_0's auc: 0.874733
[770]	valid_0's auc: 0.874779
[771]	valid_0's auc: 0.874786
[772]	valid_0's auc: 0.874813
[773]	valid_0's auc: 0.874897
[774]	valid_0's auc: 0.874929
[775]	valid_0's auc: 0.87493
[776]	valid_0's auc: 0.874993
[777]	valid_0's auc: 0.87502
[778]	valid_0's auc: 0.875021
[779]	valid_0's auc: 0.875052
[780]	valid_0's auc: 0.87509
[781]	valid_0's auc: 0.875081
[782]	valid_0's auc: 0.875123
[783]	valid_0's auc: 0.875156
[784]	valid_0's auc: 0.875148
[785]	valid_0's auc: 0.875219
[786]	valid_0's auc: 0.875211
[787]	valid_0's auc: 0.875221
[788]	valid_0's auc: 0.875248
[789]	valid_0's auc: 0.875263
[790]	valid_0's auc: 0.875283
[791]	valid_0's auc: 0.87528
[792]	valid_0's auc: 0.87529
[793]	valid_0's auc: 0.875263
[794]	valid_0's auc: 0.875279
[795]	valid_0's auc: 0.875336
[796]	valid_0's auc: 0.875435
[797]	valid_0's auc: 0.875465
[798]	valid_0's auc: 0.875498
[799]	valid_0's auc: 0.875544
[800]	valid_0's auc: 0.875625
[801]	valid_0's auc: 0.875658
[802]	valid_0's auc: 0.875728
[803]	valid_0's auc: 0.875749
[804]	valid_0's auc: 0.875753
[805]	valid_0's auc: 0.875758
[806]	valid_0's auc: 0.875758
[807]	valid_0's auc: 0.875768
[808]	valid_0's auc: 0.875792
[809]	valid_0's auc: 0.875831
[810]	valid_0's auc: 0.875875
[811]	valid_0's auc: 0.875913
[812]	valid_0's auc: 0.875941
[813]	valid_0's auc: 0.875958
[814]	valid_0's auc: 0.875983
[815]	valid_0's auc: 0.875998
[816]	valid_0's auc: 0.875994
[817]	valid_0's auc: 0.876031
[818]	valid_0's auc: 0.87608
[819]	valid_0's auc: 0.876103
[820]	valid_0's auc: 0.876136
[821]	valid_0's auc: 0.876145
[822]	valid_0's auc: 0.876178
[823]	valid_0's auc: 0.876184
[824]	valid_0's auc: 0.876254
[825]	valid_0's auc: 0.876297
[826]	valid_0's auc: 0.876321
[827]	valid_0's auc: 0.87633
[828]	valid_0's auc: 0.876323
[829]	valid_0's auc: 0.876293
[830]	valid_0's auc: 0.876357
[831]	valid_0's auc: 0.876421
[832]	valid_0's auc: 0.876447
[833]	valid_0's auc: 0.87647
[834]	valid_0's auc: 0.876561
[835]	valid_0's auc: 0.876633
[836]	valid_0's auc: 0.876662
[837]	valid_0's auc: 0.876697
[838]	valid_0's auc: 0.876703
[839]	valid_0's auc: 0.876761
[840]	valid_0's auc: 0.876758
[841]	valid_0's auc: 0.876781
[842]	valid_0's auc: 0.876815
[843]	valid_0's auc: 0.876828
[844]	valid_0's auc: 0.876845
[845]	valid_0's auc: 0.876841
[846]	valid_0's auc: 0.87686
[847]	valid_0's auc: 0.87689
[848]	valid_0's auc: 0.876911
[849]	valid_0's auc: 0.876913
[850]	valid_0's auc: 0.876947
[851]	valid_0's auc: 0.876958
[852]	valid_0's auc: 0.876944
[853]	valid_0's auc: 0.876992
[854]	valid_0's auc: 0.877017
[855]	valid_0's auc: 0.877027
[856]	valid_0's auc: 0.877046
[857]	valid_0's auc: 0.877022
[858]	valid_0's auc: 0.876998
[859]	valid_0's auc: 0.877023
[860]	valid_0's auc: 0.877016
[861]	valid_0's auc: 0.87703
[862]	valid_0's auc: 0.876997
[863]	valid_0's auc: 0.876987
[864]	valid_0's auc: 0.876972
[865]	valid_0's auc: 0.876961
[866]	valid_0's auc: 0.876984
[867]	valid_0's auc: 0.877008
[868]	valid_0's auc: 0.877021
[869]	valid_0's auc: 0.877027
[870]	valid_0's auc: 0.877024
[871]	valid_0's auc: 0.877036
[872]	valid_0's auc: 0.877065
[873]	valid_0's auc: 0.877059
[874]	valid_0's auc: 0.877077
[875]	valid_0's auc: 0.877071
[876]	valid_0's auc: 0.877089
[877]	valid_0's auc: 0.877089
[878]	valid_0's auc: 0.87708
[879]	valid_0's auc: 0.877093
[880]	valid_0's auc: 0.877145
[881]	valid_0's auc: 0.877211
[882]	valid_0's auc: 0.877213
[883]	valid_0's auc: 0.877203
[884]	valid_0's auc: 0.877213
[885]	valid_0's auc: 0.87725
[886]	valid_0's auc: 0.87727
[887]	valid_0's auc: 0.877262
[888]	valid_0's auc: 0.877287
[889]	valid_0's auc: 0.877325
[890]	valid_0's auc: 0.877351
[891]	valid_0's auc: 0.877331
[892]	valid_0's auc: 0.877412
[893]	valid_0's auc: 0.877398
[894]	valid_0's auc: 0.877372
[895]	valid_0's auc: 0.877434
[896]	valid_0's auc: 0.877425
[897]	valid_0's auc: 0.877416
[898]	valid_0's auc: 0.877472
[899]	valid_0's auc: 0.8775
[900]	valid_0's auc: 0.877544
[901]	valid_0's auc: 0.877569
[902]	valid_0's auc: 0.877569
[903]	valid_0's auc: 0.87762
[904]	valid_0's auc: 0.877622
[905]	valid_0's auc: 0.877628
[906]	valid_0's auc: 0.877657
[907]	valid_0's auc: 0.877672
[908]	valid_0's auc: 0.877687
[909]	valid_0's auc: 0.877724
[910]	valid_0's auc: 0.877766
[911]	valid_0's auc: 0.877755
[912]	valid_0's auc: 0.877744
[913]	valid_0's auc: 0.877766
[914]	valid_0's auc: 0.877805
[915]	valid_0's auc: 0.877813
[916]	valid_0's auc: 0.877847
[917]	valid_0's auc: 0.877866
[918]	valid_0's auc: 0.877858
[919]	valid_0's auc: 0.877897
[920]	valid_0's auc: 0.877967
[921]	valid_0's auc: 0.878014
[922]	valid_0's auc: 0.878051
[923]	valid_0's auc: 0.878039
[924]	valid_0's auc: 0.878027
[925]	valid_0's auc: 0.877997
[926]	valid_0's auc: 0.878001
[927]	valid_0's auc: 0.878018
[928]	valid_0's auc: 0.878067
[929]	valid_0's auc: 0.878104
[930]	valid_0's auc: 0.878106
[931]	valid_0's auc: 0.878136
[932]	valid_0's auc: 0.878143
[933]	valid_0's auc: 0.878138
[934]	valid_0's auc: 0.878152
[935]	valid_0's auc: 0.878139
[936]	valid_0's auc: 0.878186
[937]	valid_0's auc: 0.878234
[938]	valid_0's auc: 0.878294
[939]	valid_0's auc: 0.878332
[940]	valid_0's auc: 0.878385
[941]	valid_0's auc: 0.878373
[942]	valid_0's auc: 0.878376
[943]	valid_0's auc: 0.878348
[944]	valid_0's auc: 0.87837
[945]	valid_0's auc: 0.878389
[946]	valid_0's auc: 0.878413
[947]	valid_0's auc: 0.87846
[948]	valid_0's auc: 0.878493
[949]	valid_0's auc: 0.878512
[950]	valid_0's auc: 0.878475
[951]	valid_0's auc: 0.878447
[952]	valid_0's auc: 0.878473
[953]	valid_0's auc: 0.878497
[954]	valid_0's auc: 0.878505
[955]	valid_0's auc: 0.878515
[956]	valid_0's auc: 0.878503
[957]	valid_0's auc: 0.878507
[958]	valid_0's auc: 0.878484
[959]	valid_0's auc: 0.878491
[960]	valid_0's auc: 0.878484
[961]	valid_0's auc: 0.878492
[962]	valid_0's auc: 0.87851
[963]	valid_0's auc: 0.878501
[964]	valid_0's auc: 0.878512
[965]	valid_0's auc: 0.87858
[966]	valid_0's auc: 0.878604
[967]	valid_0's auc: 0.878648
[968]	valid_0's auc: 0.878731
[969]	valid_0's auc: 0.878744
[970]	valid_0's auc: 0.878787
[971]	valid_0's auc: 0.878823
[972]	valid_0's auc: 0.878829
[973]	valid_0's auc: 0.87885
[974]	valid_0's auc: 0.878866
[975]	valid_0's auc: 0.878912
[976]	valid_0's auc: 0.878961
[977]	valid_0's auc: 0.878943
[978]	valid_0's auc: 0.878952
[979]	valid_0's auc: 0.878962
[980]	valid_0's auc: 0.878952
[981]	valid_0's auc: 0.87898
[982]	valid_0's auc: 0.879004
[983]	valid_0's auc: 0.879004
[984]	valid_0's auc: 0.879011
[985]	valid_0's auc: 0.87903
[986]	valid_0's auc: 0.879024
[987]	valid_0's auc: 0.879053
[988]	valid_0's auc: 0.878974
[989]	valid_0's auc: 0.87901
[990]	valid_0's auc: 0.879048
[991]	valid_0's auc: 0.879059
[992]	valid_0's auc: 0.879069
[993]	valid_0's auc: 0.879073
[994]	valid_0's auc: 0.879074
[995]	valid_0's auc: 0.879123
[996]	valid_0's auc: 0.879139
[997]	valid_0's auc: 0.879162
[998]	valid_0's auc: 0.879169
[999]	valid_0's auc: 0.879207
[1000]	valid_0's auc: 0.879248
[1001]	valid_0's auc: 0.879276
[1002]	valid_0's auc: 0.87932
[1003]	valid_0's auc: 0.87933
[1004]	valid_0's auc: 0.879345
[1005]	valid_0's auc: 0.879383
[1006]	valid_0's auc: 0.879394
[1007]	valid_0's auc: 0.879446
[1008]	valid_0's auc: 0.879422
[1009]	valid_0's auc: 0.879453
[1010]	valid_0's auc: 0.879463
[1011]	valid_0's auc: 0.879455
[1012]	valid_0's auc: 0.879482
[1013]	valid_0's auc: 0.87951
[1014]	valid_0's auc: 0.87955
[1015]	valid_0's auc: 0.879571
[1016]	valid_0's auc: 0.879601
[1017]	valid_0's auc: 0.879632
[1018]	valid_0's auc: 0.879636
[1019]	valid_0's auc: 0.879607
[1020]	valid_0's auc: 0.879618
[1021]	valid_0's auc: 0.879638
[1022]	valid_0's auc: 0.879659
[1023]	valid_0's auc: 0.879671
[1024]	valid_0's auc: 0.879704
[1025]	valid_0's auc: 0.879675
[1026]	valid_0's auc: 0.879643
[1027]	valid_0's auc: 0.87967
[1028]	valid_0's auc: 0.879682
[1029]	valid_0's auc: 0.87972
[1030]	valid_0's auc: 0.879702
[1031]	valid_0's auc: 0.879716
[1032]	valid_0's auc: 0.879735
[1033]	valid_0's auc: 0.879772
[1034]	valid_0's auc: 0.879818
[1035]	valid_0's auc: 0.879855
[1036]	valid_0's auc: 0.87985
[1037]	valid_0's auc: 0.879847
[1038]	valid_0's auc: 0.879848
[1039]	valid_0's auc: 0.879852
[1040]	valid_0's auc: 0.879887
[1041]	valid_0's auc: 0.879907
[1042]	valid_0's auc: 0.879926
[1043]	valid_0's auc: 0.879916
[1044]	valid_0's auc: 0.87995
[1045]	valid_0's auc: 0.879979
[1046]	valid_0's auc: 0.880006
[1047]	valid_0's auc: 0.88002
[1048]	valid_0's auc: 0.880051
[1049]	valid_0's auc: 0.880084
[1050]	valid_0's auc: 0.880126
[1051]	valid_0's auc: 0.880107
[1052]	valid_0's auc: 0.880129
[1053]	valid_0's auc: 0.880149
[1054]	valid_0's auc: 0.880141
[1055]	valid_0's auc: 0.880137
[1056]	valid_0's auc: 0.88014
[1057]	valid_0's auc: 0.880137
[1058]	valid_0's auc: 0.880122
[1059]	valid_0's auc: 0.880131
[1060]	valid_0's auc: 0.880161
[1061]	valid_0's auc: 0.880209
[1062]	valid_0's auc: 0.880228
[1063]	valid_0's auc: 0.880236
[1064]	valid_0's auc: 0.880291
[1065]	valid_0's auc: 0.880295
[1066]	valid_0's auc: 0.88026
[1067]	valid_0's auc: 0.880259
[1068]	valid_0's auc: 0.880279
[1069]	valid_0's auc: 0.880321
[1070]	valid_0's auc: 0.880315
[1071]	valid_0's auc: 0.880369
[1072]	valid_0's auc: 0.880361
[1073]	valid_0's auc: 0.880386
[1074]	valid_0's auc: 0.88041
[1075]	valid_0's auc: 0.880417
[1076]	valid_0's auc: 0.880409
[1077]	valid_0's auc: 0.880421
[1078]	valid_0's auc: 0.880385
[1079]	valid_0's auc: 0.880431
[1080]	valid_0's auc: 0.880449
[1081]	valid_0's auc: 0.880438
[1082]	valid_0's auc: 0.880473
[1083]	valid_0's auc: 0.880497
[1084]	valid_0's auc: 0.880521
[1085]	valid_0's auc: 0.880528
[1086]	valid_0's auc: 0.880552
[1087]	valid_0's auc: 0.880549
[1088]	valid_0's auc: 0.880623
[1089]	valid_0's auc: 0.880653
[1090]	valid_0's auc: 0.88065
[1091]	valid_0's auc: 0.880666
[1092]	valid_0's auc: 0.880689
[1093]	valid_0's auc: 0.880677
[1094]	valid_0's auc: 0.880697
[1095]	valid_0's auc: 0.880714
[1096]	valid_0's auc: 0.880723
[1097]	valid_0's auc: 0.880706
[1098]	valid_0's auc: 0.880706
[1099]	valid_0's auc: 0.880719
[1100]	valid_0's auc: 0.880718
[1101]	valid_0's auc: 0.880696
[1102]	valid_0's auc: 0.88072
[1103]	valid_0's auc: 0.880736
[1104]	valid_0's auc: 0.880782
[1105]	valid_0's auc: 0.880822
[1106]	valid_0's auc: 0.880835
[1107]	valid_0's auc: 0.880855
[1108]	valid_0's auc: 0.880841
[1109]	valid_0's auc: 0.880838
[1110]	valid_0's auc: 0.88085
[1111]	valid_0's auc: 0.880811
[1112]	valid_0's auc: 0.88083
[1113]	valid_0's auc: 0.880821
[1114]	valid_0's auc: 0.88086
[1115]	valid_0's auc: 0.880866
[1116]	valid_0's auc: 0.880873
[1117]	valid_0's auc: 0.880852
[1118]	valid_0's auc: 0.880856
[1119]	valid_0's auc: 0.880859
[1120]	valid_0's auc: 0.880854
[1121]	valid_0's auc: 0.880865
[1122]	valid_0's auc: 0.88087
[1123]	valid_0's auc: 0.880879
[1124]	valid_0's auc: 0.880907
[1125]	valid_0's auc: 0.880934
[1126]	valid_0's auc: 0.880957
[1127]	valid_0's auc: 0.880959
[1128]	valid_0's auc: 0.88096
[1129]	valid_0's auc: 0.880959
[1130]	valid_0's auc: 0.880991
[1131]	valid_0's auc: 0.881021
[1132]	valid_0's auc: 0.881076
[1133]	valid_0's auc: 0.881088
[1134]	valid_0's auc: 0.881105
[1135]	valid_0's auc: 0.881135
[1136]	valid_0's auc: 0.881112
[1137]	valid_0's auc: 0.881135
[1138]	valid_0's auc: 0.881147
[1139]	valid_0's auc: 0.881148
[1140]	valid_0's auc: 0.881135
[1141]	valid_0's auc: 0.881111
[1142]	valid_0's auc: 0.881148
[1143]	valid_0's auc: 0.881157
[1144]	valid_0's auc: 0.881144
[1145]	valid_0's auc: 0.881131
[1146]	valid_0's auc: 0.881142
[1147]	valid_0's auc: 0.881147
[1148]	valid_0's auc: 0.881154
[1149]	valid_0's auc: 0.881167
[1150]	valid_0's auc: 0.881166
[1151]	valid_0's auc: 0.881159
[1152]	valid_0's auc: 0.881187
[1153]	valid_0's auc: 0.881191
[1154]	valid_0's auc: 0.881194
[1155]	valid_0's auc: 0.881194
[1156]	valid_0's auc: 0.881205
[1157]	valid_0's auc: 0.88119
[1158]	valid_0's auc: 0.88121
[1159]	valid_0's auc: 0.881229
[1160]	valid_0's auc: 0.881248
[1161]	valid_0's auc: 0.881249
[1162]	valid_0's auc: 0.881238
[1163]	valid_0's auc: 0.881249
[1164]	valid_0's auc: 0.881269
[1165]	valid_0's auc: 0.881307
[1166]	valid_0's auc: 0.881337
[1167]	valid_0's auc: 0.881354
[1168]	valid_0's auc: 0.881378
[1169]	valid_0's auc: 0.881376
[1170]	valid_0's auc: 0.881355
[1171]	valid_0's auc: 0.881408
[1172]	valid_0's auc: 0.881435
[1173]	valid_0's auc: 0.88144
[1174]	valid_0's auc: 0.88144
[1175]	valid_0's auc: 0.881494
[1176]	valid_0's auc: 0.881518
[1177]	valid_0's auc: 0.881552
[1178]	valid_0's auc: 0.881559
[1179]	valid_0's auc: 0.881607
[1180]	valid_0's auc: 0.88161
[1181]	valid_0's auc: 0.881606
[1182]	valid_0's auc: 0.881616
[1183]	valid_0's auc: 0.881633
[1184]	valid_0's auc: 0.881645
[1185]	valid_0's auc: 0.881638
[1186]	valid_0's auc: 0.881622
[1187]	valid_0's auc: 0.881641
[1188]	valid_0's auc: 0.881645
[1189]	valid_0's auc: 0.881637
[1190]	valid_0's auc: 0.881639
[1191]	valid_0's auc: 0.881623
[1192]	valid_0's auc: 0.88164
[1193]	valid_0's auc: 0.88162
[1194]	valid_0's auc: 0.881644
[1195]	valid_0's auc: 0.881647
[1196]	valid_0's auc: 0.881639
[1197]	valid_0's auc: 0.881633
[1198]	valid_0's auc: 0.881623
[1199]	valid_0's auc: 0.881655
[1200]	valid_0's auc: 0.881704
[1201]	valid_0's auc: 0.881725
[1202]	valid_0's auc: 0.881742
[1203]	valid_0's auc: 0.881748
[1204]	valid_0's auc: 0.881727
[1205]	valid_0's auc: 0.881739
[1206]	valid_0's auc: 0.881741
[1207]	valid_0's auc: 0.881709
[1208]	valid_0's auc: 0.881711
[1209]	valid_0's auc: 0.881689
[1210]	valid_0's auc: 0.881676
[1211]	valid_0's auc: 0.881699
[1212]	valid_0's auc: 0.881708
[1213]	valid_0's auc: 0.881696
[1214]	valid_0's auc: 0.881682
[1215]	valid_0's auc: 0.88164
[1216]	valid_0's auc: 0.881642
[1217]	valid_0's auc: 0.881648
[1218]	valid_0's auc: 0.881647
[1219]	valid_0's auc: 0.881659
[1220]	valid_0's auc: 0.881693
[1221]	valid_0's auc: 0.881701
[1222]	valid_0's auc: 0.881701
[1223]	valid_0's auc: 0.881695
[1224]	valid_0's auc: 0.88172
[1225]	valid_0's auc: 0.88172
[1226]	valid_0's auc: 0.881733
[1227]	valid_0's auc: 0.881746
[1228]	valid_0's auc: 0.881775
[1229]	valid_0's auc: 0.881785
[1230]	valid_0's auc: 0.881792
[1231]	valid_0's auc: 0.881781
[1232]	valid_0's auc: 0.881814
[1233]	valid_0's auc: 0.881807
[1234]	valid_0's auc: 0.881791
[1235]	valid_0's auc: 0.881828
[1236]	valid_0's auc: 0.881827
[1237]	valid_0's auc: 0.881874
[1238]	valid_0's auc: 0.88185
[1239]	valid_0's auc: 0.881841
[1240]	valid_0's auc: 0.881847
[1241]	valid_0's auc: 0.881854
[1242]	valid_0's auc: 0.881873
[1243]	valid_0's auc: 0.881903
[1244]	valid_0's auc: 0.881921
[1245]	valid_0's auc: 0.881932
[1246]	valid_0's auc: 0.881939
[1247]	valid_0's auc: 0.881932
[1248]	valid_0's auc: 0.881942
[1249]	valid_0's auc: 0.881967
[1250]	valid_0's auc: 0.88194
[1251]	valid_0's auc: 0.881963
[1252]	valid_0's auc: 0.881943
[1253]	valid_0's auc: 0.881964
[1254]	valid_0's auc: 0.881968
[1255]	valid_0's auc: 0.881985
[1256]	valid_0's auc: 0.881983
[1257]	valid_0's auc: 0.881983
[1258]	valid_0's auc: 0.882016
[1259]	valid_0's auc: 0.882017
[1260]	valid_0's auc: 0.882008
[1261]	valid_0's auc: 0.882006
[1262]	valid_0's auc: 0.882039
[1263]	valid_0's auc: 0.882088
[1264]	valid_0's auc: 0.882117
[1265]	valid_0's auc: 0.882126
[1266]	valid_0's auc: 0.882142
[1267]	valid_0's auc: 0.882178
[1268]	valid_0's auc: 0.882175
[1269]	valid_0's auc: 0.882181
[1270]	valid_0's auc: 0.882207
[1271]	valid_0's auc: 0.882221
[1272]	valid_0's auc: 0.882225
[1273]	valid_0's auc: 0.882244
[1274]	valid_0's auc: 0.882284
[1275]	valid_0's auc: 0.882296
[1276]	valid_0's auc: 0.882303
[1277]	valid_0's auc: 0.882312
[1278]	valid_0's auc: 0.882335
[1279]	valid_0's auc: 0.882315
[1280]	valid_0's auc: 0.882343
[1281]	valid_0's auc: 0.882371
[1282]	valid_0's auc: 0.882356
[1283]	valid_0's auc: 0.882396
[1284]	valid_0's auc: 0.882402
[1285]	valid_0's auc: 0.882388
[1286]	valid_0's auc: 0.882419
[1287]	valid_0's auc: 0.882415
[1288]	valid_0's auc: 0.882426
[1289]	valid_0's auc: 0.882386
[1290]	valid_0's auc: 0.882378
[1291]	valid_0's auc: 0.882358
[1292]	valid_0's auc: 0.882344
[1293]	valid_0's auc: 0.882357
[1294]	valid_0's auc: 0.882385
[1295]	valid_0's auc: 0.88238
[1296]	valid_0's auc: 0.88242
[1297]	valid_0's auc: 0.88239
[1298]	valid_0's auc: 0.882398
[1299]	valid_0's auc: 0.882402
[1300]	valid_0's auc: 0.882412
[1301]	valid_0's auc: 0.882423
[1302]	valid_0's auc: 0.882435
[1303]	valid_0's auc: 0.882382
[1304]	valid_0's auc: 0.88239
[1305]	valid_0's auc: 0.882363
[1306]	valid_0's auc: 0.882398
[1307]	valid_0's auc: 0.882376
[1308]	valid_0's auc: 0.882379
[1309]	valid_0's auc: 0.882351
[1310]	valid_0's auc: 0.882371
[1311]	valid_0's auc: 0.882379
[1312]	valid_0's auc: 0.88239
[1313]	valid_0's auc: 0.88242
[1314]	valid_0's auc: 0.882411
[1315]	valid_0's auc: 0.882426
[1316]	valid_0's auc: 0.88243
[1317]	valid_0's auc: 0.882426
[1318]	valid_0's auc: 0.882444
[1319]	valid_0's auc: 0.882461
[1320]	valid_0's auc: 0.882471
[1321]	valid_0's auc: 0.882462
[1322]	valid_0's auc: 0.882477
[1323]	valid_0's auc: 0.882465
[1324]	valid_0's auc: 0.882448
[1325]	valid_0's auc: 0.882463
[1326]	valid_0's auc: 0.88248
[1327]	valid_0's auc: 0.882476
[1328]	valid_0's auc: 0.882508
[1329]	valid_0's auc: 0.882545
[1330]	valid_0's auc: 0.882571
[1331]	valid_0's auc: 0.882612
[1332]	valid_0's auc: 0.882636
[1333]	valid_0's auc: 0.882636
[1334]	valid_0's auc: 0.882622
[1335]	valid_0's auc: 0.882631
[1336]	valid_0's auc: 0.882606
[1337]	valid_0's auc: 0.882599
[1338]	valid_0's auc: 0.882594
[1339]	valid_0's auc: 0.882574
[1340]	valid_0's auc: 0.882591
[1341]	valid_0's auc: 0.882586
[1342]	valid_0's auc: 0.882574
[1343]	valid_0's auc: 0.882573
[1344]	valid_0's auc: 0.882558
[1345]	valid_0's auc: 0.882554
[1346]	valid_0's auc: 0.882589
[1347]	valid_0's auc: 0.882582
[1348]	valid_0's auc: 0.882562
[1349]	valid_0's auc: 0.882553
[1350]	valid_0's auc: 0.882562
[1351]	valid_0's auc: 0.882559
[1352]	valid_0's auc: 0.882527
[1353]	valid_0's auc: 0.882532
[1354]	valid_0's auc: 0.882511
[1355]	valid_0's auc: 0.88253
[1356]	valid_0's auc: 0.882535
[1357]	valid_0's auc: 0.882529
[1358]	valid_0's auc: 0.882514
[1359]	valid_0's auc: 0.88256
[1360]	valid_0's auc: 0.882563
[1361]	valid_0's auc: 0.882577
[1362]	valid_0's auc: 0.882594
[1363]	valid_0's auc: 0.882632
[1364]	valid_0's auc: 0.88263
[1365]	valid_0's auc: 0.882642
[1366]	valid_0's auc: 0.882673
[1367]	valid_0's auc: 0.882709
[1368]	valid_0's auc: 0.882732
[1369]	valid_0's auc: 0.882761
[1370]	valid_0's auc: 0.882811
[1371]	valid_0's auc: 0.882794
[1372]	valid_0's auc: 0.882794
[1373]	valid_0's auc: 0.8828
[1374]	valid_0's auc: 0.882811
[1375]	valid_0's auc: 0.882829
[1376]	valid_0's auc: 0.882846
[1377]	valid_0's auc: 0.882859
[1378]	valid_0's auc: 0.882842
[1379]	valid_0's auc: 0.882845
[1380]	valid_0's auc: 0.882871
[1381]	valid_0's auc: 0.8829
[1382]	valid_0's auc: 0.882873
[1383]	valid_0's auc: 0.882885
[1384]	valid_0's auc: 0.882902
[1385]	valid_0's auc: 0.88292
[1386]	valid_0's auc: 0.882907
[1387]	valid_0's auc: 0.882923
[1388]	valid_0's auc: 0.88294
[1389]	valid_0's auc: 0.882938
[1390]	valid_0's auc: 0.882929
[1391]	valid_0's auc: 0.882941
[1392]	valid_0's auc: 0.882953
[1393]	valid_0's auc: 0.882956
[1394]	valid_0's auc: 0.882956
[1395]	valid_0's auc: 0.882961
[1396]	valid_0's auc: 0.882983
[1397]	valid_0's auc: 0.88298
[1398]	valid_0's auc: 0.882991
[1399]	valid_0's auc: 0.88301
[1400]	valid_0's auc: 0.883022
[1401]	valid_0's auc: 0.883032
[1402]	valid_0's auc: 0.883024
[1403]	valid_0's auc: 0.883021
[1404]	valid_0's auc: 0.883011
[1405]	valid_0's auc: 0.882986
[1406]	valid_0's auc: 0.882984
[1407]	valid_0's auc: 0.883013
[1408]	valid_0's auc: 0.88304
[1409]	valid_0's auc: 0.883034
[1410]	valid_0's auc: 0.883028
[1411]	valid_0's auc: 0.88302
[1412]	valid_0's auc: 0.883037
[1413]	valid_0's auc: 0.88303
[1414]	valid_0's auc: 0.883031
[1415]	valid_0's auc: 0.88307
[1416]	valid_0's auc: 0.883071
[1417]	valid_0's auc: 0.883067
[1418]	valid_0's auc: 0.883087
[1419]	valid_0's auc: 0.883084
[1420]	valid_0's auc: 0.883123
[1421]	valid_0's auc: 0.883149
[1422]	valid_0's auc: 0.883164
[1423]	valid_0's auc: 0.883174
[1424]	valid_0's auc: 0.883181
[1425]	valid_0's auc: 0.883159
[1426]	valid_0's auc: 0.883146
[1427]	valid_0's auc: 0.883161
[1428]	valid_0's auc: 0.883161
[1429]	valid_0's auc: 0.883157
[1430]	valid_0's auc: 0.883165
[1431]	valid_0's auc: 0.883145
[1432]	valid_0's auc: 0.883167
[1433]	valid_0's auc: 0.88316
[1434]	valid_0's auc: 0.883149
[1435]	valid_0's auc: 0.883141
[1436]	valid_0's auc: 0.883152
[1437]	valid_0's auc: 0.883151
[1438]	valid_0's auc: 0.883202
[1439]	valid_0's auc: 0.883207
[1440]	valid_0's auc: 0.883225
[1441]	valid_0's auc: 0.883223
[1442]	valid_0's auc: 0.883192
[1443]	valid_0's auc: 0.883179
[1444]	valid_0's auc: 0.883165
[1445]	valid_0's auc: 0.883145
[1446]	valid_0's auc: 0.883153
[1447]	valid_0's auc: 0.883172
[1448]	valid_0's auc: 0.883132
[1449]	valid_0's auc: 0.883164
[1450]	valid_0's auc: 0.883154
[1451]	valid_0's auc: 0.883136
[1452]	valid_0's auc: 0.883137
[1453]	valid_0's auc: 0.883133
[1454]	valid_0's auc: 0.883159
[1455]	valid_0's auc: 0.883187
[1456]	valid_0's auc: 0.883174
[1457]	valid_0's auc: 0.883165
[1458]	valid_0's auc: 0.883166
[1459]	valid_0's auc: 0.883162
[1460]	valid_0's auc: 0.883173
[1461]	valid_0's auc: 0.88316
[1462]	valid_0's auc: 0.883144
[1463]	valid_0's auc: 0.883156
[1464]	valid_0's auc: 0.883139
[1465]	valid_0's auc: 0.883108
[1466]	valid_0's auc: 0.883136
[1467]	valid_0's auc: 0.883138
[1468]	valid_0's auc: 0.883141
[1469]	valid_0's auc: 0.883144
[1470]	valid_0's auc: 0.883154
[1471]	valid_0's auc: 0.883156
[1472]	valid_0's auc: 0.883156
[1473]	valid_0's auc: 0.883174
[1474]	valid_0's auc: 0.883182
[1475]	valid_0's auc: 0.883197
[1476]	valid_0's auc: 0.883204
[1477]	valid_0's auc: 0.883194
[1478]	valid_0's auc: 0.883189
[1479]	valid_0's auc: 0.883195
[1480]	valid_0's auc: 0.883205
[1481]	valid_0's auc: 0.883233
[1482]	valid_0's auc: 0.883263
[1483]	valid_0's auc: 0.883253
[1484]	valid_0's auc: 0.883291
[1485]	valid_0's auc: 0.883302
[1486]	valid_0's auc: 0.88329
[1487]	valid_0's auc: 0.883317
[1488]	valid_0's auc: 0.883287
[1489]	valid_0's auc: 0.883269
[1490]	valid_0's auc: 0.883259
[1491]	valid_0's auc: 0.88325
[1492]	valid_0's auc: 0.883273
[1493]	valid_0's auc: 0.883299
[1494]	valid_0's auc: 0.883325
[1495]	valid_0's auc: 0.883309
[1496]	valid_0's auc: 0.883328
[1497]	valid_0's auc: 0.88333
[1498]	valid_0's auc: 0.883342
[1499]	valid_0's auc: 0.883351
[1500]	valid_0's auc: 0.883357
[1501]	valid_0's auc: 0.883384
[1502]	valid_0's auc: 0.883397
[1503]	valid_0's auc: 0.883444
[1504]	valid_0's auc: 0.883415
[1505]	valid_0's auc: 0.883458
[1506]	valid_0's auc: 0.883469
[1507]	valid_0's auc: 0.883469
[1508]	valid_0's auc: 0.88346
[1509]	valid_0's auc: 0.883481
[1510]	valid_0's auc: 0.883507
[1511]	valid_0's auc: 0.883493
[1512]	valid_0's auc: 0.883515
[1513]	valid_0's auc: 0.883544
[1514]	valid_0's auc: 0.883568
[1515]	valid_0's auc: 0.883556
[1516]	valid_0's auc: 0.883592
[1517]	valid_0's auc: 0.883582
[1518]	valid_0's auc: 0.883599
[1519]	valid_0's auc: 0.883589
[1520]	valid_0's auc: 0.883571
[1521]	valid_0's auc: 0.883596
[1522]	valid_0's auc: 0.883585
[1523]	valid_0's auc: 0.883569
[1524]	valid_0's auc: 0.883583
[1525]	valid_0's auc: 0.883602
[1526]	valid_0's auc: 0.883622
[1527]	valid_0's auc: 0.883614
[1528]	valid_0's auc: 0.883633
[1529]	valid_0's auc: 0.883618
[1530]	valid_0's auc: 0.883618
[1531]	valid_0's auc: 0.883641
[1532]	valid_0's auc: 0.883634
[1533]	valid_0's auc: 0.883625
[1534]	valid_0's auc: 0.883645
[1535]	valid_0's auc: 0.883637
[1536]	valid_0's auc: 0.883643
[1537]	valid_0's auc: 0.883659
[1538]	valid_0's auc: 0.883683
[1539]	valid_0's auc: 0.883669
[1540]	valid_0's auc: 0.883684
[1541]	valid_0's auc: 0.883701
[1542]	valid_0's auc: 0.883727
[1543]	valid_0's auc: 0.883742
[1544]	valid_0's auc: 0.883733
[1545]	valid_0's auc: 0.883713
[1546]	valid_0's auc: 0.883721
[1547]	valid_0's auc: 0.883749
[1548]	valid_0's auc: 0.883745
[1549]	valid_0's auc: 0.883722
[1550]	valid_0's auc: 0.883709
[1551]	valid_0's auc: 0.883731
[1552]	valid_0's auc: 0.883709
[1553]	valid_0's auc: 0.883709
[1554]	valid_0's auc: 0.883702
[1555]	valid_0's auc: 0.883676
[1556]	valid_0's auc: 0.8837
[1557]	valid_0's auc: 0.883694
[1558]	valid_0's auc: 0.883701
[1559]	valid_0's auc: 0.883709
[1560]	valid_0's auc: 0.883731
[1561]	valid_0's auc: 0.883765
[1562]	valid_0's auc: 0.883776
[1563]	valid_0's auc: 0.883804
[1564]	valid_0's auc: 0.883804
[1565]	valid_0's auc: 0.883816
[1566]	valid_0's auc: 0.883806
[1567]	valid_0's auc: 0.883792
[1568]	valid_0's auc: 0.883816
[1569]	valid_0's auc: 0.883816
[1570]	valid_0's auc: 0.883821
[1571]	valid_0's auc: 0.883811
[1572]	valid_0's auc: 0.883837
[1573]	valid_0's auc: 0.883854
[1574]	valid_0's auc: 0.883848
[1575]	valid_0's auc: 0.883847
[1576]	valid_0's auc: 0.883846
[1577]	valid_0's auc: 0.88384
[1578]	valid_0's auc: 0.883865
[1579]	valid_0's auc: 0.883875
[1580]	valid_0's auc: 0.883885
[1581]	valid_0's auc: 0.88388
[1582]	valid_0's auc: 0.883906
[1583]	valid_0's auc: 0.883908
[1584]	valid_0's auc: 0.883931
[1585]	valid_0's auc: 0.883923
[1586]	valid_0's auc: 0.883917
[1587]	valid_0's auc: 0.883927
[1588]	valid_0's auc: 0.883938
[1589]	valid_0's auc: 0.883917
[1590]	valid_0's auc: 0.883898
[1591]	valid_0's auc: 0.883927
[1592]	valid_0's auc: 0.883952
[1593]	valid_0's auc: 0.883938
[1594]	valid_0's auc: 0.883934
[1595]	valid_0's auc: 0.883937
[1596]	valid_0's auc: 0.883943
[1597]	valid_0's auc: 0.883965
[1598]	valid_0's auc: 0.883963
[1599]	valid_0's auc: 0.883974
[1600]	valid_0's auc: 0.883977
[1601]	valid_0's auc: 0.883996
[1602]	valid_0's auc: 0.884019
[1603]	valid_0's auc: 0.883998
[1604]	valid_0's auc: 0.884022
[1605]	valid_0's auc: 0.884041
[1606]	valid_0's auc: 0.884053
[1607]	valid_0's auc: 0.884087
[1608]	valid_0's auc: 0.884091
[1609]	valid_0's auc: 0.884085
[1610]	valid_0's auc: 0.884076
[1611]	valid_0's auc: 0.884086
[1612]	valid_0's auc: 0.884095
[1613]	valid_0's auc: 0.884129
[1614]	valid_0's auc: 0.884109
[1615]	valid_0's auc: 0.884096
[1616]	valid_0's auc: 0.884101
[1617]	valid_0's auc: 0.884117
[1618]	valid_0's auc: 0.884104
[1619]	valid_0's auc: 0.884121
[1620]	valid_0's auc: 0.884124
[1621]	valid_0's auc: 0.884136
[1622]	valid_0's auc: 0.884154
[1623]	valid_0's auc: 0.884167
[1624]	valid_0's auc: 0.884163
[1625]	valid_0's auc: 0.884172
[1626]	valid_0's auc: 0.884183
[1627]	valid_0's auc: 0.884173
[1628]	valid_0's auc: 0.884178
[1629]	valid_0's auc: 0.88418
[1630]	valid_0's auc: 0.884191
[1631]	valid_0's auc: 0.884227
[1632]	valid_0's auc: 0.884219
[1633]	valid_0's auc: 0.884218
[1634]	valid_0's auc: 0.884233
[1635]	valid_0's auc: 0.884257
[1636]	valid_0's auc: 0.88426
[1637]	valid_0's auc: 0.88427
[1638]	valid_0's auc: 0.884284
[1639]	valid_0's auc: 0.884292
[1640]	valid_0's auc: 0.884263
[1641]	valid_0's auc: 0.884268
[1642]	valid_0's auc: 0.884274
[1643]	valid_0's auc: 0.884262
[1644]	valid_0's auc: 0.884251
[1645]	valid_0's auc: 0.884229
[1646]	valid_0's auc: 0.884272
[1647]	valid_0's auc: 0.88428
[1648]	valid_0's auc: 0.884305
[1649]	valid_0's auc: 0.884348
[1650]	valid_0's auc: 0.884389
[1651]	valid_0's auc: 0.884403
[1652]	valid_0's auc: 0.884408
[1653]	valid_0's auc: 0.884436
[1654]	valid_0's auc: 0.884435
[1655]	valid_0's auc: 0.884437
[1656]	valid_0's auc: 0.884472
[1657]	valid_0's auc: 0.884489
[1658]	valid_0's auc: 0.884495
[1659]	valid_0's auc: 0.884501
[1660]	valid_0's auc: 0.88449
[1661]	valid_0's auc: 0.884481
[1662]	valid_0's auc: 0.884499
[1663]	valid_0's auc: 0.884458
[1664]	valid_0's auc: 0.88447
[1665]	valid_0's auc: 0.884472
[1666]	valid_0's auc: 0.884458
[1667]	valid_0's auc: 0.884473
[1668]	valid_0's auc: 0.884442
[1669]	valid_0's auc: 0.884482
[1670]	valid_0's auc: 0.884495
[1671]	valid_0's auc: 0.884504
[1672]	valid_0's auc: 0.884522
[1673]	valid_0's auc: 0.884525
[1674]	valid_0's auc: 0.884509
[1675]	valid_0's auc: 0.884516
[1676]	valid_0's auc: 0.884505
[1677]	valid_0's auc: 0.884509
[1678]	valid_0's auc: 0.88453
[1679]	valid_0's auc: 0.884509
[1680]	valid_0's auc: 0.884513
[1681]	valid_0's auc: 0.88454
[1682]	valid_0's auc: 0.884556
[1683]	valid_0's auc: 0.88455
[1684]	valid_0's auc: 0.884545
[1685]	valid_0's auc: 0.884567
[1686]	valid_0's auc: 0.884578
[1687]	valid_0's auc: 0.884572
[1688]	valid_0's auc: 0.884615
[1689]	valid_0's auc: 0.884653
[1690]	valid_0's auc: 0.884671
[1691]	valid_0's auc: 0.884678
[1692]	valid_0's auc: 0.884696
[1693]	valid_0's auc: 0.884718
[1694]	valid_0's auc: 0.884724
[1695]	valid_0's auc: 0.884739
[1696]	valid_0's auc: 0.884751
[1697]	valid_0's auc: 0.884756
[1698]	valid_0's auc: 0.884759
[1699]	valid_0's auc: 0.884782
[1700]	valid_0's auc: 0.884791
[1701]	valid_0's auc: 0.884805
[1702]	valid_0's auc: 0.88479
[1703]	valid_0's auc: 0.884803
[1704]	valid_0's auc: 0.884794
[1705]	valid_0's auc: 0.884786
[1706]	valid_0's auc: 0.88479
[1707]	valid_0's auc: 0.88478
[1708]	valid_0's auc: 0.884798
[1709]	valid_0's auc: 0.88481
[1710]	valid_0's auc: 0.884798
[1711]	valid_0's auc: 0.884797
[1712]	valid_0's auc: 0.884816
[1713]	valid_0's auc: 0.884802
[1714]	valid_0's auc: 0.88481
[1715]	valid_0's auc: 0.884799
[1716]	valid_0's auc: 0.884805
[1717]	valid_0's auc: 0.884816
[1718]	valid_0's auc: 0.88483
[1719]	valid_0's auc: 0.884809
[1720]	valid_0's auc: 0.884805
[1721]	valid_0's auc: 0.884847
[1722]	valid_0's auc: 0.88482
[1723]	valid_0's auc: 0.884821
[1724]	valid_0's auc: 0.884817
[1725]	valid_0's auc: 0.884804
[1726]	valid_0's auc: 0.884784
[1727]	valid_0's auc: 0.884773
[1728]	valid_0's auc: 0.884785
[1729]	valid_0's auc: 0.8848
[1730]	valid_0's auc: 0.884822
[1731]	valid_0's auc: 0.884858
[1732]	valid_0's auc: 0.884844
[1733]	valid_0's auc: 0.884833
[1734]	valid_0's auc: 0.884866
[1735]	valid_0's auc: 0.884892
[1736]	valid_0's auc: 0.884891
[1737]	valid_0's auc: 0.884897
[1738]	valid_0's auc: 0.884902
[1739]	valid_0's auc: 0.884913
[1740]	valid_0's auc: 0.884909
[1741]	valid_0's auc: 0.884945
[1742]	valid_0's auc: 0.884944
[1743]	valid_0's auc: 0.884982
[1744]	valid_0's auc: 0.885
[1745]	valid_0's auc: 0.884989
[1746]	valid_0's auc: 0.885002
[1747]	valid_0's auc: 0.885024
[1748]	valid_0's auc: 0.885055
[1749]	valid_0's auc: 0.88507
[1750]	valid_0's auc: 0.885062
[1751]	valid_0's auc: 0.885067
[1752]	valid_0's auc: 0.885051
[1753]	valid_0's auc: 0.885046
[1754]	valid_0's auc: 0.885054
[1755]	valid_0's auc: 0.885046
[1756]	valid_0's auc: 0.885046
[1757]	valid_0's auc: 0.885072
[1758]	valid_0's auc: 0.885058
[1759]	valid_0's auc: 0.885073
[1760]	valid_0's auc: 0.885075
[1761]	valid_0's auc: 0.885132
[1762]	valid_0's auc: 0.885122
[1763]	valid_0's auc: 0.885132
[1764]	valid_0's auc: 0.885133
[1765]	valid_0's auc: 0.885125
[1766]	valid_0's auc: 0.885113
[1767]	valid_0's auc: 0.885121
[1768]	valid_0's auc: 0.885111
[1769]	valid_0's auc: 0.885114
[1770]	valid_0's auc: 0.885121
[1771]	valid_0's auc: 0.885146
[1772]	valid_0's auc: 0.88516
[1773]	valid_0's auc: 0.885172
[1774]	valid_0's auc: 0.885178
[1775]	valid_0's auc: 0.885187
[1776]	valid_0's auc: 0.885213
[1777]	valid_0's auc: 0.885198
[1778]	valid_0's auc: 0.885177
[1779]	valid_0's auc: 0.88519
[1780]	valid_0's auc: 0.885198
[1781]	valid_0's auc: 0.885203
[1782]	valid_0's auc: 0.885222
[1783]	valid_0's auc: 0.885213
[1784]	valid_0's auc: 0.885209
[1785]	valid_0's auc: 0.885193
[1786]	valid_0's auc: 0.885199
[1787]	valid_0's auc: 0.885227
[1788]	valid_0's auc: 0.885228
[1789]	valid_0's auc: 0.885239
[1790]	valid_0's auc: 0.88523
[1791]	valid_0's auc: 0.885246
[1792]	valid_0's auc: 0.885255
[1793]	valid_0's auc: 0.885282
[1794]	valid_0's auc: 0.885293
[1795]	valid_0's auc: 0.885288
[1796]	valid_0's auc: 0.885319
[1797]	valid_0's auc: 0.885307
[1798]	valid_0's auc: 0.885314
[1799]	valid_0's auc: 0.8853
[1800]	valid_0's auc: 0.885343
[1801]	valid_0's auc: 0.885316
[1802]	valid_0's auc: 0.88531
[1803]	valid_0's auc: 0.885313
[1804]	valid_0's auc: 0.885314
[1805]	valid_0's auc: 0.885306
[1806]	valid_0's auc: 0.885289
[1807]	valid_0's auc: 0.885322
[1808]	valid_0's auc: 0.885282
[1809]	valid_0's auc: 0.885268
[1810]	valid_0's auc: 0.885268
[1811]	valid_0's auc: 0.885267
[1812]	valid_0's auc: 0.885253
[1813]	valid_0's auc: 0.88527
[1814]	valid_0's auc: 0.885257
[1815]	valid_0's auc: 0.885275
[1816]	valid_0's auc: 0.885292
[1817]	valid_0's auc: 0.885296
[1818]	valid_0's auc: 0.885322
[1819]	valid_0's auc: 0.885303
[1820]	valid_0's auc: 0.885303
[1821]	valid_0's auc: 0.885308
[1822]	valid_0's auc: 0.885318
[1823]	valid_0's auc: 0.885354
[1824]	valid_0's auc: 0.885373
[1825]	valid_0's auc: 0.88537
[1826]	valid_0's auc: 0.885386
[1827]	valid_0's auc: 0.885396
[1828]	valid_0's auc: 0.885388
[1829]	valid_0's auc: 0.885412
[1830]	valid_0's auc: 0.885443
[1831]	valid_0's auc: 0.885469
[1832]	valid_0's auc: 0.885476
[1833]	valid_0's auc: 0.885472
[1834]	valid_0's auc: 0.885498
[1835]	valid_0's auc: 0.885503
[1836]	valid_0's auc: 0.885495
[1837]	valid_0's auc: 0.885492
[1838]	valid_0's auc: 0.885503
[1839]	valid_0's auc: 0.885502
[1840]	valid_0's auc: 0.885496
[1841]	valid_0's auc: 0.885471
[1842]	valid_0's auc: 0.885475
[1843]	valid_0's auc: 0.885483
[1844]	valid_0's auc: 0.885449
[1845]	valid_0's auc: 0.885437
[1846]	valid_0's auc: 0.885423
[1847]	valid_0's auc: 0.885433
[1848]	valid_0's auc: 0.885436
[1849]	valid_0's auc: 0.885453
[1850]	valid_0's auc: 0.88545
[1851]	valid_0's auc: 0.885448
[1852]	valid_0's auc: 0.885467
[1853]	valid_0's auc: 0.885458
[1854]	valid_0's auc: 0.885448
[1855]	valid_0's auc: 0.88545
[1856]	valid_0's auc: 0.885455
[1857]	valid_0's auc: 0.88548
[1858]	valid_0's auc: 0.88548
[1859]	valid_0's auc: 0.885465
[1860]	valid_0's auc: 0.88547
[1861]	valid_0's auc: 0.885514
[1862]	valid_0's auc: 0.885517
[1863]	valid_0's auc: 0.885515
[1864]	valid_0's auc: 0.885513
[1865]	valid_0's auc: 0.885498
[1866]	valid_0's auc: 0.88552
[1867]	valid_0's auc: 0.885529
[1868]	valid_0's auc: 0.88554
[1869]	valid_0's auc: 0.885524
[1870]	valid_0's auc: 0.885535
[1871]	valid_0's auc: 0.885546
[1872]	valid_0's auc: 0.885549
[1873]	valid_0's auc: 0.885525
[1874]	valid_0's auc: 0.885527
[1875]	valid_0's auc: 0.885561
[1876]	valid_0's auc: 0.885564
[1877]	valid_0's auc: 0.885554
[1878]	valid_0's auc: 0.88557
[1879]	valid_0's auc: 0.885551
[1880]	valid_0's auc: 0.885561
[1881]	valid_0's auc: 0.885564
[1882]	valid_0's auc: 0.885573
[1883]	valid_0's auc: 0.885566
[1884]	valid_0's auc: 0.885542
[1885]	valid_0's auc: 0.885565
[1886]	valid_0's auc: 0.885575
[1887]	valid_0's auc: 0.885589
[1888]	valid_0's auc: 0.885601
[1889]	valid_0's auc: 0.885597
[1890]	valid_0's auc: 0.885587
[1891]	valid_0's auc: 0.8856
[1892]	valid_0's auc: 0.885615
[1893]	valid_0's auc: 0.885608
[1894]	valid_0's auc: 0.885632
[1895]	valid_0's auc: 0.885646
[1896]	valid_0's auc: 0.885619
[1897]	valid_0's auc: 0.88561
[1898]	valid_0's auc: 0.885617
[1899]	valid_0's auc: 0.885612
[1900]	valid_0's auc: 0.885575
[1901]	valid_0's auc: 0.885593
[1902]	valid_0's auc: 0.885586
[1903]	valid_0's auc: 0.885581
[1904]	valid_0's auc: 0.885605
[1905]	valid_0's auc: 0.885599
[1906]	valid_0's auc: 0.885586
[1907]	valid_0's auc: 0.885593
[1908]	valid_0's auc: 0.885584
[1909]	valid_0's auc: 0.8856
[1910]	valid_0's auc: 0.885608
[1911]	valid_0's auc: 0.8856
[1912]	valid_0's auc: 0.885616
[1913]	valid_0's auc: 0.88561
[1914]	valid_0's auc: 0.885591
[1915]	valid_0's auc: 0.88562
[1916]	valid_0's auc: 0.885619
[1917]	valid_0's auc: 0.885636
[1918]	valid_0's auc: 0.885656
[1919]	valid_0's auc: 0.885647
[1920]	valid_0's auc: 0.885653
[1921]	valid_0's auc: 0.885688
[1922]	valid_0's auc: 0.885689
[1923]	valid_0's auc: 0.885664
[1924]	valid_0's auc: 0.885671
[1925]	valid_0's auc: 0.885684
[1926]	valid_0's auc: 0.88568
[1927]	valid_0's auc: 0.885689
[1928]	valid_0's auc: 0.885683
[1929]	valid_0's auc: 0.885707
[1930]	valid_0's auc: 0.885719
[1931]	valid_0's auc: 0.885722
[1932]	valid_0's auc: 0.885719
[1933]	valid_0's auc: 0.885714
[1934]	valid_0's auc: 0.885712
[1935]	valid_0's auc: 0.885721
[1936]	valid_0's auc: 0.885742
[1937]	valid_0's auc: 0.885764
[1938]	valid_0's auc: 0.885781
[1939]	valid_0's auc: 0.885801
[1940]	valid_0's auc: 0.885799
[1941]	valid_0's auc: 0.885806
[1942]	valid_0's auc: 0.885821
[1943]	valid_0's auc: 0.885821
[1944]	valid_0's auc: 0.885834
[1945]	valid_0's auc: 0.885847
[1946]	valid_0's auc: 0.88583
[1947]	valid_0's auc: 0.885823
[1948]	valid_0's auc: 0.885826
[1949]	valid_0's auc: 0.885855
[1950]	valid_0's auc: 0.88585
[1951]	valid_0's auc: 0.885878
[1952]	valid_0's auc: 0.885895
[1953]	valid_0's auc: 0.885867
[1954]	valid_0's auc: 0.885855
[1955]	valid_0's auc: 0.885852
[1956]	valid_0's auc: 0.885841
[1957]	valid_0's auc: 0.885859
[1958]	valid_0's auc: 0.885872
[1959]	valid_0's auc: 0.885897
[1960]	valid_0's auc: 0.885911
[1961]	valid_0's auc: 0.885914
[1962]	valid_0's auc: 0.88591
[1963]	valid_0's auc: 0.885901
[1964]	valid_0's auc: 0.885902
[1965]	valid_0's auc: 0.885895
[1966]	valid_0's auc: 0.885911
[1967]	valid_0's auc: 0.885906
[1968]	valid_0's auc: 0.885907
[1969]	valid_0's auc: 0.885912
[1970]	valid_0's auc: 0.885926
[1971]	valid_0's auc: 0.885936
[1972]	valid_0's auc: 0.885956
[1973]	valid_0's auc: 0.885958
[1974]	valid_0's auc: 0.885942
[1975]	valid_0's auc: 0.885914
[1976]	valid_0's auc: 0.885916
[1977]	valid_0's auc: 0.885922
[1978]	valid_0's auc: 0.885921
[1979]	valid_0's auc: 0.885917
[1980]	valid_0's auc: 0.885884
[1981]	valid_0's auc: 0.885871
[1982]	valid_0's auc: 0.885863
[1983]	valid_0's auc: 0.885861
[1984]	valid_0's auc: 0.88586
[1985]	valid_0's auc: 0.885861
[1986]	valid_0's auc: 0.885881
[1987]	valid_0's auc: 0.885908
[1988]	valid_0's auc: 0.88592
[1989]	valid_0's auc: 0.88595
[1990]	valid_0's auc: 0.885961
[1991]	valid_0's auc: 0.885965
[1992]	valid_0's auc: 0.88595
[1993]	valid_0's auc: 0.885946
[1994]	valid_0's auc: 0.885947
[1995]	valid_0's auc: 0.885954
[1996]	valid_0's auc: 0.885948
[1997]	valid_0's auc: 0.885942
[1998]	valid_0's auc: 0.885937
[1999]	valid_0's auc: 0.885966
[2000]	valid_0's auc: 0.88595
[2001]	valid_0's auc: 0.885934
[2002]	valid_0's auc: 0.885944
[2003]	valid_0's auc: 0.885933
[2004]	valid_0's auc: 0.885935
[2005]	valid_0's auc: 0.885922
[2006]	valid_0's auc: 0.885949
[2007]	valid_0's auc: 0.885967
[2008]	valid_0's auc: 0.88596
[2009]	valid_0's auc: 0.885956
[2010]	valid_0's auc: 0.885968
[2011]	valid_0's auc: 0.88595
[2012]	valid_0's auc: 0.885981
[2013]	valid_0's auc: 0.885955
[2014]	valid_0's auc: 0.885942
[2015]	valid_0's auc: 0.885919
[2016]	valid_0's auc: 0.885933
[2017]	valid_0's auc: 0.885943
[2018]	valid_0's auc: 0.885949
[2019]	valid_0's auc: 0.885926
[2020]	valid_0's auc: 0.885929
[2021]	valid_0's auc: 0.885902
[2022]	valid_0's auc: 0.885913
[2023]	valid_0's auc: 0.885913
[2024]	valid_0's auc: 0.88596
[2025]	valid_0's auc: 0.885983
[2026]	valid_0's auc: 0.886002
[2027]	valid_0's auc: 0.885995
[2028]	valid_0's auc: 0.886012
[2029]	valid_0's auc: 0.886011
[2030]	valid_0's auc: 0.885989
[2031]	valid_0's auc: 0.886028
[2032]	valid_0's auc: 0.886041
[2033]	valid_0's auc: 0.886064
[2034]	valid_0's auc: 0.886072
[2035]	valid_0's auc: 0.886107
[2036]	valid_0's auc: 0.886117
[2037]	valid_0's auc: 0.886109
[2038]	valid_0's auc: 0.886109
[2039]	valid_0's auc: 0.88613
[2040]	valid_0's auc: 0.886124
[2041]	valid_0's auc: 0.88612
[2042]	valid_0's auc: 0.886143
[2043]	valid_0's auc: 0.886151
[2044]	valid_0's auc: 0.886133
[2045]	valid_0's auc: 0.886152
[2046]	valid_0's auc: 0.886142
[2047]	valid_0's auc: 0.886139
[2048]	valid_0's auc: 0.88612
[2049]	valid_0's auc: 0.88616
[2050]	valid_0's auc: 0.886173
[2051]	valid_0's auc: 0.88615
[2052]	valid_0's auc: 0.886175
[2053]	valid_0's auc: 0.886167
[2054]	valid_0's auc: 0.886167
[2055]	valid_0's auc: 0.88617
[2056]	valid_0's auc: 0.886189
[2057]	valid_0's auc: 0.886189
[2058]	valid_0's auc: 0.886188
[2059]	valid_0's auc: 0.886183
[2060]	valid_0's auc: 0.886158
[2061]	valid_0's auc: 0.886187
[2062]	valid_0's auc: 0.88618
[2063]	valid_0's auc: 0.886184
[2064]	valid_0's auc: 0.88616
[2065]	valid_0's auc: 0.886138
[2066]	valid_0's auc: 0.886142
[2067]	valid_0's auc: 0.886131
[2068]	valid_0's auc: 0.886122
[2069]	valid_0's auc: 0.886123
[2070]	valid_0's auc: 0.886109
[2071]	valid_0's auc: 0.886056
[2072]	valid_0's auc: 0.886046
[2073]	valid_0's auc: 0.886067
[2074]	valid_0's auc: 0.886087
[2075]	valid_0's auc: 0.886081
[2076]	valid_0's auc: 0.886092
[2077]	valid_0's auc: 0.886109
[2078]	valid_0's auc: 0.886119
[2079]	valid_0's auc: 0.886126
[2080]	valid_0's auc: 0.886135
[2081]	valid_0's auc: 0.886127
[2082]	valid_0's auc: 0.886101
[2083]	valid_0's auc: 0.886117
[2084]	valid_0's auc: 0.886112
[2085]	valid_0's auc: 0.886092
[2086]	valid_0's auc: 0.886096
[2087]	valid_0's auc: 0.886093
[2088]	valid_0's auc: 0.886086
[2089]	valid_0's auc: 0.886084
[2090]	valid_0's auc: 0.886075
[2091]	valid_0's auc: 0.886091
[2092]	valid_0's auc: 0.886111
[2093]	valid_0's auc: 0.886117
[2094]	valid_0's auc: 0.886108
[2095]	valid_0's auc: 0.886105
[2096]	valid_0's auc: 0.886118
[2097]	valid_0's auc: 0.886123
[2098]	valid_0's auc: 0.886144
[2099]	valid_0's auc: 0.886136
[2100]	valid_0's auc: 0.88614
[2101]	valid_0's auc: 0.886134
[2102]	valid_0's auc: 0.886128
[2103]	valid_0's auc: 0.886123
[2104]	valid_0's auc: 0.886121
[2105]	valid_0's auc: 0.886122
[2106]	valid_0's auc: 0.886133
Early stopping, best iteration is:
[2056]	valid_0's auc: 0.886189
Done Training.
#+end_example

#+BEGIN_SRC python :session :results file
# feature importances
# print('Feature importances:', list(gbm.feature_importance()))

lgb.plot_importance(gbm, max_num_features=20)
plt.savefig('feature_importance.png')
plt.close 
'feature_importance.png'
#+END_SRC

#+RESULTS:
[[file:feature_importance.png]]

* TODO Could also try other Categorical encoding e.g. from Sklearn

See also https://catboost.ai/docs/concepts/python-reference_catboostclassifier.html, also look to see if LightGBM has option to specify catgorical features.
